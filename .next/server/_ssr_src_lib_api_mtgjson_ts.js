"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "_ssr_src_lib_api_mtgjson_ts";
exports.ids = ["_ssr_src_lib_api_mtgjson_ts"];
exports.modules = {

/***/ "(ssr)/./src/lib/api/mtgjson.ts":
/*!********************************!*\
  !*** ./src/lib/api/mtgjson.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MTGJSON_CONFIG: () => (/* binding */ MTGJSON_CONFIG),\n/* harmony export */   batchGetPriceHistories: () => (/* binding */ batchGetPriceHistories),\n/* harmony export */   clearMTGJSONCache: () => (/* binding */ clearMTGJSONCache),\n/* harmony export */   convertMTGJSONPrices: () => (/* binding */ convertMTGJSONPrices),\n/* harmony export */   fetchPriceHistoryByUUID: () => (/* binding */ fetchPriceHistoryByUUID),\n/* harmony export */   getCardMapping: () => (/* binding */ getCardMapping),\n/* harmony export */   getMTGJSONCacheStats: () => (/* binding */ getMTGJSONCacheStats),\n/* harmony export */   getPriceHistoryForCard: () => (/* binding */ getPriceHistoryForCard)\n/* harmony export */ });\n/* harmony import */ var _lib_services_cardMappingService__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/lib/services/cardMappingService */ \"(ssr)/./src/lib/services/cardMappingService.ts\");\n// MTGJSON Configuration\nconst MTGJSON_CONFIG = {\n    baseUrl: 'https://mtgjson.com/api/v5',\n    cacheExpiry: 24 * 60 * 60 * 1000,\n    preferredProvider: 'tcgplayer',\n    enableCaching: true\n};\n// Cache management\nconst CACHE_KEYS = {\n    ALL_PRICES: 'mtgjson-all-prices',\n    CARD_MAPPINGS: 'mtgjson-card-mappings',\n    PRICE_HISTORY: 'mtgjson-price-history-'\n};\n// Rate limiting: MTGJSON doesn't specify limits, but we'll be conservative\nconst RATE_LIMIT_DELAY = 200; // 200ms between requests\nlet lastRequestTime = 0;\nasync function rateLimitedFetch(url) {\n    const now = Date.now();\n    const timeSinceLastRequest = now - lastRequestTime;\n    if (timeSinceLastRequest < RATE_LIMIT_DELAY) {\n        await new Promise((resolve)=>setTimeout(resolve, RATE_LIMIT_DELAY - timeSinceLastRequest));\n    }\n    lastRequestTime = Date.now();\n    try {\n        console.log(`Fetching MTGJSON data: ${url}`);\n        const response = await fetch(url);\n        if (!response.ok) {\n            throw new Error(`MTGJSON API Error: ${response.status} ${response.statusText}`);\n        }\n        return response;\n    } catch (error) {\n        console.error('MTGJSON API request failed:', {\n            url,\n            error: error instanceof Error ? error.message : 'Unknown error',\n            timestamp: new Date().toISOString()\n        });\n        if (error instanceof Error) {\n            if (error.message.includes('Failed to fetch')) {\n                throw new Error('Network error: Unable to connect to MTGJSON API. Please check your internet connection.');\n            }\n        }\n        throw error;\n    }\n}\n// Cache utilities\nfunction getCachedData(key) {\n    if (!MTGJSON_CONFIG.enableCaching || \"undefined\" === 'undefined') {\n        return null;\n    }\n    try {\n        const cached = localStorage.getItem(key);\n        if (!cached) return null;\n        const parsed = JSON.parse(cached);\n        const now = Date.now();\n        if (parsed.expiresAt && now > parsed.expiresAt) {\n            localStorage.removeItem(key);\n            return null;\n        }\n        return parsed.data;\n    } catch (error) {\n        console.error(`Error reading cache for key ${key}:`, error);\n        return null;\n    }\n}\nfunction setCachedData(key, data, customExpiry) {\n    if (!MTGJSON_CONFIG.enableCaching || \"undefined\" === 'undefined') {\n        return;\n    }\n    try {\n        const expiry = customExpiry || MTGJSON_CONFIG.cacheExpiry;\n        const cacheEntry = {\n            data,\n            expiresAt: Date.now() + expiry,\n            cachedAt: Date.now()\n        };\n        localStorage.setItem(key, JSON.stringify(cacheEntry));\n    } catch (error) {\n        console.error(`Error setting cache for key ${key}:`, error);\n    }\n}\n// Import the card mapping service\n\n// Map Scryfall card to MTGJSON UUID\nasync function getCardMapping(scryfallCard) {\n    try {\n        // Use the card mapping service\n        const uuid = await _lib_services_cardMappingService__WEBPACK_IMPORTED_MODULE_0__.cardMappingService.getMapping(scryfallCard);\n        if (uuid) {\n            // Cache the successful mapping\n            const cacheKey = `${CACHE_KEYS.CARD_MAPPINGS}${scryfallCard.id}`;\n            setCachedData(cacheKey, uuid);\n        }\n        return uuid;\n    } catch (error) {\n        console.error(`Error getting card mapping for ${scryfallCard.name}:`, error);\n        return null;\n    }\n}\n// Fetch price history for a specific UUID\nasync function fetchPriceHistoryByUUID(uuid) {\n    try {\n        // Check cache first\n        const cacheKey = `${CACHE_KEYS.PRICE_HISTORY}${uuid}`;\n        const cached = getCachedData(cacheKey);\n        if (cached) return cached;\n        // Try to get from AllPrices data\n        const priceData = await getAllPricesData();\n        if (priceData && priceData[uuid]) {\n            const cardPrices = priceData[uuid];\n            // Cache the result\n            setCachedData(cacheKey, cardPrices);\n            return cardPrices;\n        }\n        console.log(`No price history found for UUID ${uuid}`);\n        return null;\n    } catch (error) {\n        console.error('Error fetching price history:', error);\n        return null;\n    }\n}\n// Fetch and cache AllPrices.json data\nlet allPricesCache = null;\nlet allPricesLoadingPromise = null;\nasync function getAllPricesData() {\n    // Return cached data if available\n    if (allPricesCache) {\n        return allPricesCache;\n    }\n    // Return existing loading promise if in progress\n    if (allPricesLoadingPromise) {\n        return allPricesLoadingPromise;\n    }\n    // Start loading AllPrices data\n    allPricesLoadingPromise = loadAllPricesData();\n    return allPricesLoadingPromise;\n}\nasync function loadAllPricesData() {\n    try {\n        console.log('Loading MTGJSON AllPrices data...');\n        // Check if we have cached AllPrices data\n        const cachedAllPrices = getCachedData('mtgjson-all-prices-data');\n        // Use cached data if it's less than 24 hours old\n        if (cachedAllPrices && Date.now() - cachedAllPrices.timestamp < 24 * 60 * 60 * 1000) {\n            console.log('Using cached AllPrices data');\n            allPricesCache = cachedAllPrices.data;\n            return allPricesCache;\n        }\n        // Fetch fresh AllPrices data\n        console.log('Fetching fresh AllPrices data from MTGJSON...');\n        const response = await rateLimitedFetch('https://mtgjson.com/api/v5/AllPrices.json');\n        if (!response.ok) {\n            throw new Error(`Failed to fetch AllPrices: ${response.status} ${response.statusText}`);\n        }\n        // Parse the JSON response\n        const allPricesResponse = await response.json();\n        if (!allPricesResponse.data) {\n            throw new Error('Invalid AllPrices response format');\n        }\n        // Cache the data\n        const cacheData = {\n            data: allPricesResponse.data,\n            timestamp: Date.now(),\n            version: allPricesResponse.meta?.version || 'unknown'\n        };\n        setCachedData('mtgjson-all-prices-data', cacheData);\n        allPricesCache = allPricesResponse.data;\n        console.log(`Loaded AllPrices data for ${Object.keys(allPricesCache || {}).length} cards`);\n        return allPricesCache;\n    } catch (error) {\n        console.error('Failed to load AllPrices data:', error);\n        // Try to use stale cached data as fallback\n        const staleCache = getCachedData('mtgjson-all-prices-data');\n        if (staleCache) {\n            console.warn('Using stale AllPrices cache due to fetch failure');\n            allPricesCache = staleCache.data;\n            return allPricesCache;\n        }\n        return null;\n    } finally{\n        allPricesLoadingPromise = null;\n    }\n}\n// Convert MTGJSON price data to our internal format\nfunction convertMTGJSONPrices(uuid, mtgjsonPrices, cardName) {\n    const processedPrices = [];\n    try {\n        // Get the preferred provider's data\n        const provider = MTGJSON_CONFIG.preferredProvider;\n        const paperPrices = mtgjsonPrices.paper?.[provider];\n        if (paperPrices?.normal) {\n            paperPrices.normal.forEach((pricePoint)=>{\n                processedPrices.push({\n                    cardId: uuid,\n                    date: pricePoint.date,\n                    price: pricePoint.price,\n                    priceType: 'usd'\n                });\n            });\n        }\n        if (paperPrices?.foil) {\n            paperPrices.foil.forEach((pricePoint)=>{\n                processedPrices.push({\n                    cardId: uuid,\n                    date: pricePoint.date,\n                    price: pricePoint.price,\n                    priceType: 'usdFoil'\n                });\n            });\n        }\n    } catch (error) {\n        console.error(`Error converting MTGJSON prices for ${cardName}:`, error);\n    }\n    return processedPrices.sort((a, b)=>new Date(a.date).getTime() - new Date(b.date).getTime());\n}\n// Get price history for a Scryfall card\nasync function getPriceHistoryForCard(scryfallCard) {\n    try {\n        // First, get the MTGJSON UUID mapping\n        const uuid = await getCardMapping(scryfallCard);\n        if (!uuid) {\n            console.log(`No MTGJSON mapping found for ${scryfallCard.name}`);\n            return null;\n        }\n        // Fetch the price history\n        const mtgjsonPrices = await fetchPriceHistoryByUUID(uuid);\n        if (!mtgjsonPrices) {\n            return null;\n        }\n        // Convert to our internal format\n        const processedPrices = convertMTGJSONPrices(uuid, mtgjsonPrices, scryfallCard.name);\n        if (processedPrices.length === 0) {\n            return null;\n        }\n        // Calculate trend and volatility\n        const prices = processedPrices.map((p)=>p.price);\n        const averagePrice = prices.reduce((sum, price)=>sum + price, 0) / prices.length;\n        // Simple trend calculation (last 7 days vs previous 7 days)\n        const recent = prices.slice(-7);\n        const previous = prices.slice(-14, -7);\n        const recentAvg = recent.reduce((sum, p)=>sum + p, 0) / recent.length;\n        const previousAvg = previous.reduce((sum, p)=>sum + p, 0) / previous.length;\n        const trend = recentAvg > previousAvg * 1.05 ? 'up' : recentAvg < previousAvg * 0.95 ? 'down' : 'stable';\n        // Calculate volatility (standard deviation)\n        const variance = prices.reduce((sum, price)=>sum + Math.pow(price - averagePrice, 2), 0) / prices.length;\n        const volatility = Math.sqrt(variance);\n        // Calculate percentage changes\n        const percentChange24h = prices.length >= 2 ? (prices[prices.length - 1] - prices[prices.length - 2]) / prices[prices.length - 2] * 100 : undefined;\n        const percentChange7d = recent.length > 0 && previous.length > 0 ? (recentAvg - previousAvg) / previousAvg * 100 : undefined;\n        return {\n            cardId: scryfallCard.id,\n            uuid,\n            prices: processedPrices,\n            trend,\n            volatility,\n            averagePrice,\n            percentChange24h,\n            percentChange7d,\n            lastUpdated: new Date().toISOString(),\n            provider: 'mtgjson'\n        };\n    } catch (error) {\n        console.error(`Error getting price history for ${scryfallCard.name}:`, error);\n        return null;\n    }\n}\n// Batch fetch price histories for multiple cards\nasync function batchGetPriceHistories(cards) {\n    const results = new Map();\n    // Process cards in batches to avoid overwhelming the system\n    const batchSize = 10;\n    for(let i = 0; i < cards.length; i += batchSize){\n        const batch = cards.slice(i, i + batchSize);\n        const batchPromises = batch.map(async (card)=>{\n            const history = await getPriceHistoryForCard(card);\n            if (history) {\n                results.set(card.id, history);\n            }\n        });\n        await Promise.all(batchPromises);\n        // Add a small delay between batches\n        if (i + batchSize < cards.length) {\n            await new Promise((resolve)=>setTimeout(resolve, 1000));\n        }\n    }\n    return results;\n}\n// Utility function to clear MTGJSON cache\nfunction clearMTGJSONCache() {\n    if (true) return;\n    try {\n        const keys = Object.keys(localStorage);\n        keys.forEach((key)=>{\n            if (key.startsWith('mtgjson-')) {\n                localStorage.removeItem(key);\n            }\n        });\n        console.log('MTGJSON cache cleared');\n    } catch (error) {\n        console.error('Error clearing MTGJSON cache:', error);\n    }\n}\n// Get cache statistics\nfunction getMTGJSONCacheStats() {\n    if (true) return null;\n    try {\n        const keys = Object.keys(localStorage);\n        const mtgjsonKeys = keys.filter((key)=>key.startsWith('mtgjson-'));\n        let totalSize = 0;\n        const cacheEntries = mtgjsonKeys.map((key)=>{\n            const data = localStorage.getItem(key);\n            const size = data ? data.length : 0;\n            totalSize += size;\n            return {\n                key,\n                size,\n                sizeFormatted: `${(size / 1024).toFixed(2)} KB`\n            };\n        });\n        return {\n            totalEntries: mtgjsonKeys.length,\n            totalSize,\n            totalSizeFormatted: `${(totalSize / 1024 / 1024).toFixed(2)} MB`,\n            entries: cacheEntries\n        };\n    } catch (error) {\n        console.error('Error getting cache stats:', error);\n        return null;\n    }\n}\n// Export configuration for external use\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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RXRELElBQUlJLFlBQVk7UUFDaEIsTUFBTUMsZUFBZUgsWUFBWW5DLEdBQUcsQ0FBQ2pFLENBQUFBO1lBQ25DLE1BQU1TLE9BQU9QLGFBQWFDLE9BQU8sQ0FBQ0g7WUFDbEMsTUFBTXdHLE9BQU8vRixPQUFPQSxLQUFLK0IsTUFBTSxHQUFHO1lBQ2xDOEQsYUFBYUU7WUFFYixPQUFPO2dCQUNMeEc7Z0JBQ0F3RztnQkFDQUMsZUFBZSxHQUFHLENBQUNELE9BQU8sSUFBRyxFQUFHRSxPQUFPLENBQUMsR0FBRyxHQUFHLENBQUM7WUFDakQ7UUFDRjtRQUVBLE9BQU87WUFDTEMsY0FBY1AsWUFBWTVELE1BQU07WUFDaEM4RDtZQUNBTSxvQkFBb0IsR0FBRyxDQUFDTixZQUFZLE9BQU8sSUFBRyxFQUFHSSxPQUFPLENBQUMsR0FBRyxHQUFHLENBQUM7WUFDaEVHLFNBQVNOO1FBQ1g7SUFDRixFQUFFLE9BQU83RyxPQUFPO1FBQ2RSLFFBQVFRLEtBQUssQ0FBQyw4QkFBOEJBO1FBQzVDLE9BQU87SUFDVDtBQUNGO0FBRUEsd0NBQXdDO0FBQ2QiLCJzb3VyY2VzIjpbIkM6XFxQcm9qZWN0c1xcbXRnLWluZGV4XFxzcmNcXGxpYlxcYXBpXFxtdGdqc29uLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFxyXG4gIE1UR0pTT05DYXJkLCBcclxuICBNVEdKU09OQ2FyZFByaWNlcywgXHJcbiAgTVRHSlNPTlByaWNlUG9pbnQsIFxyXG4gIE1UR0pTT05Db25maWcsIFxyXG4gIE1UR0pTT05DYWNoZSxcclxuICBQcmljZUhpc3RvcnksXHJcbiAgUHJvY2Vzc2VkQ2FyZFByaWNlLFxyXG4gIE1UR0NhcmQgXHJcbn0gZnJvbSAnQC9saWIvdHlwZXMnO1xyXG5cclxuLy8gTVRHSlNPTiBDb25maWd1cmF0aW9uXHJcbmNvbnN0IE1UR0pTT05fQ09ORklHOiBNVEdKU09OQ29uZmlnID0ge1xyXG4gIGJhc2VVcmw6ICdodHRwczovL210Z2pzb24uY29tL2FwaS92NScsXHJcbiAgY2FjaGVFeHBpcnk6IDI0ICogNjAgKiA2MCAqIDEwMDAsIC8vIDI0IGhvdXJzXHJcbiAgcHJlZmVycmVkUHJvdmlkZXI6ICd0Y2dwbGF5ZXInLFxyXG4gIGVuYWJsZUNhY2hpbmc6IHRydWUsXHJcbn07XHJcblxyXG4vLyBDYWNoZSBtYW5hZ2VtZW50XHJcbmNvbnN0IENBQ0hFX0tFWVMgPSB7XHJcbiAgQUxMX1BSSUNFUzogJ210Z2pzb24tYWxsLXByaWNlcycsXHJcbiAgQ0FSRF9NQVBQSU5HUzogJ210Z2pzb24tY2FyZC1tYXBwaW5ncycsXHJcbiAgUFJJQ0VfSElTVE9SWTogJ210Z2pzb24tcHJpY2UtaGlzdG9yeS0nLFxyXG59IGFzIGNvbnN0O1xyXG5cclxuLy8gUmF0ZSBsaW1pdGluZzogTVRHSlNPTiBkb2Vzbid0IHNwZWNpZnkgbGltaXRzLCBidXQgd2UnbGwgYmUgY29uc2VydmF0aXZlXHJcbmNvbnN0IFJBVEVfTElNSVRfREVMQVkgPSAyMDA7IC8vIDIwMG1zIGJldHdlZW4gcmVxdWVzdHNcclxubGV0IGxhc3RSZXF1ZXN0VGltZSA9IDA7XHJcblxyXG5hc3luYyBmdW5jdGlvbiByYXRlTGltaXRlZEZldGNoKHVybDogc3RyaW5nKTogUHJvbWlzZTxSZXNwb25zZT4ge1xyXG4gIGNvbnN0IG5vdyA9IERhdGUubm93KCk7XHJcbiAgY29uc3QgdGltZVNpbmNlTGFzdFJlcXVlc3QgPSBub3cgLSBsYXN0UmVxdWVzdFRpbWU7XHJcbiAgXHJcbiAgaWYgKHRpbWVTaW5jZUxhc3RSZXF1ZXN0IDwgUkFURV9MSU1JVF9ERUxBWSkge1xyXG4gICAgYXdhaXQgbmV3IFByb21pc2UocmVzb2x2ZSA9PiBzZXRUaW1lb3V0KHJlc29sdmUsIFJBVEVfTElNSVRfREVMQVkgLSB0aW1lU2luY2VMYXN0UmVxdWVzdCkpO1xyXG4gIH1cclxuICBcclxuICBsYXN0UmVxdWVzdFRpbWUgPSBEYXRlLm5vdygpO1xyXG4gIFxyXG4gIHRyeSB7XHJcbiAgICBjb25zb2xlLmxvZyhgRmV0Y2hpbmcgTVRHSlNPTiBkYXRhOiAke3VybH1gKTtcclxuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2godXJsKTtcclxuICAgIFxyXG4gICAgaWYgKCFyZXNwb25zZS5vaykge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYE1UR0pTT04gQVBJIEVycm9yOiAke3Jlc3BvbnNlLnN0YXR1c30gJHtyZXNwb25zZS5zdGF0dXNUZXh0fWApO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICByZXR1cm4gcmVzcG9uc2U7XHJcbiAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgIGNvbnNvbGUuZXJyb3IoJ01UR0pTT04gQVBJIHJlcXVlc3QgZmFpbGVkOicsIHtcclxuICAgICAgdXJsLFxyXG4gICAgICBlcnJvcjogZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yLm1lc3NhZ2UgOiAnVW5rbm93biBlcnJvcicsXHJcbiAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpXHJcbiAgICB9KTtcclxuICAgIFxyXG4gICAgaWYgKGVycm9yIGluc3RhbmNlb2YgRXJyb3IpIHtcclxuICAgICAgaWYgKGVycm9yLm1lc3NhZ2UuaW5jbHVkZXMoJ0ZhaWxlZCB0byBmZXRjaCcpKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdOZXR3b3JrIGVycm9yOiBVbmFibGUgdG8gY29ubmVjdCB0byBNVEdKU09OIEFQSS4gUGxlYXNlIGNoZWNrIHlvdXIgaW50ZXJuZXQgY29ubmVjdGlvbi4nKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgXHJcbiAgICB0aHJvdyBlcnJvcjtcclxuICB9XHJcbn1cclxuXHJcbi8vIENhY2hlIHV0aWxpdGllc1xyXG5mdW5jdGlvbiBnZXRDYWNoZWREYXRhPFQ+KGtleTogc3RyaW5nKTogVCB8IG51bGwge1xyXG4gIGlmICghTVRHSlNPTl9DT05GSUcuZW5hYmxlQ2FjaGluZyB8fCB0eXBlb2Ygd2luZG93ID09PSAndW5kZWZpbmVkJykge1xyXG4gICAgcmV0dXJuIG51bGw7XHJcbiAgfVxyXG5cclxuICB0cnkge1xyXG4gICAgY29uc3QgY2FjaGVkID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oa2V5KTtcclxuICAgIGlmICghY2FjaGVkKSByZXR1cm4gbnVsbDtcclxuXHJcbiAgICBjb25zdCBwYXJzZWQgPSBKU09OLnBhcnNlKGNhY2hlZCk7XHJcbiAgICBjb25zdCBub3cgPSBEYXRlLm5vdygpO1xyXG4gICAgXHJcbiAgICBpZiAocGFyc2VkLmV4cGlyZXNBdCAmJiBub3cgPiBwYXJzZWQuZXhwaXJlc0F0KSB7XHJcbiAgICAgIGxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKGtleSk7XHJcbiAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBwYXJzZWQuZGF0YTtcclxuICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgY29uc29sZS5lcnJvcihgRXJyb3IgcmVhZGluZyBjYWNoZSBmb3Iga2V5ICR7a2V5fTpgLCBlcnJvcik7XHJcbiAgICByZXR1cm4gbnVsbDtcclxuICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHNldENhY2hlZERhdGE8VD4oa2V5OiBzdHJpbmcsIGRhdGE6IFQsIGN1c3RvbUV4cGlyeT86IG51bWJlcik6IHZvaWQge1xyXG4gIGlmICghTVRHSlNPTl9DT05GSUcuZW5hYmxlQ2FjaGluZyB8fCB0eXBlb2Ygd2luZG93ID09PSAndW5kZWZpbmVkJykge1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgdHJ5IHtcclxuICAgIGNvbnN0IGV4cGlyeSA9IGN1c3RvbUV4cGlyeSB8fCBNVEdKU09OX0NPTkZJRy5jYWNoZUV4cGlyeTtcclxuICAgIGNvbnN0IGNhY2hlRW50cnkgPSB7XHJcbiAgICAgIGRhdGEsXHJcbiAgICAgIGV4cGlyZXNBdDogRGF0ZS5ub3coKSArIGV4cGlyeSxcclxuICAgICAgY2FjaGVkQXQ6IERhdGUubm93KCksXHJcbiAgICB9O1xyXG5cclxuICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKGtleSwgSlNPTi5zdHJpbmdpZnkoY2FjaGVFbnRyeSkpO1xyXG4gIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICBjb25zb2xlLmVycm9yKGBFcnJvciBzZXR0aW5nIGNhY2hlIGZvciBrZXkgJHtrZXl9OmAsIGVycm9yKTtcclxuICB9XHJcbn1cclxuXHJcbi8vIEltcG9ydCB0aGUgY2FyZCBtYXBwaW5nIHNlcnZpY2VcclxuaW1wb3J0IHsgY2FyZE1hcHBpbmdTZXJ2aWNlIH0gZnJvbSAnQC9saWIvc2VydmljZXMvY2FyZE1hcHBpbmdTZXJ2aWNlJztcclxuXHJcbi8vIE1hcCBTY3J5ZmFsbCBjYXJkIHRvIE1UR0pTT04gVVVJRFxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0Q2FyZE1hcHBpbmcoc2NyeWZhbGxDYXJkOiBNVEdDYXJkKTogUHJvbWlzZTxzdHJpbmcgfCBudWxsPiB7XHJcbiAgdHJ5IHtcclxuICAgIC8vIFVzZSB0aGUgY2FyZCBtYXBwaW5nIHNlcnZpY2VcclxuICAgIGNvbnN0IHV1aWQgPSBhd2FpdCBjYXJkTWFwcGluZ1NlcnZpY2UuZ2V0TWFwcGluZyhzY3J5ZmFsbENhcmQpO1xyXG4gICAgXHJcbiAgICBpZiAodXVpZCkge1xyXG4gICAgICAvLyBDYWNoZSB0aGUgc3VjY2Vzc2Z1bCBtYXBwaW5nXHJcbiAgICAgIGNvbnN0IGNhY2hlS2V5ID0gYCR7Q0FDSEVfS0VZUy5DQVJEX01BUFBJTkdTfSR7c2NyeWZhbGxDYXJkLmlkfWA7XHJcbiAgICAgIHNldENhY2hlZERhdGEoY2FjaGVLZXksIHV1aWQpO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICByZXR1cm4gdXVpZDtcclxuICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgY29uc29sZS5lcnJvcihgRXJyb3IgZ2V0dGluZyBjYXJkIG1hcHBpbmcgZm9yICR7c2NyeWZhbGxDYXJkLm5hbWV9OmAsIGVycm9yKTtcclxuICAgIHJldHVybiBudWxsO1xyXG4gIH1cclxufVxyXG5cclxuLy8gRmV0Y2ggcHJpY2UgaGlzdG9yeSBmb3IgYSBzcGVjaWZpYyBVVUlEXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBmZXRjaFByaWNlSGlzdG9yeUJ5VVVJRCh1dWlkOiBzdHJpbmcpOiBQcm9taXNlPE1UR0pTT05DYXJkUHJpY2VzIHwgbnVsbD4ge1xyXG4gIHRyeSB7XHJcbiAgICAvLyBDaGVjayBjYWNoZSBmaXJzdFxyXG4gICAgY29uc3QgY2FjaGVLZXkgPSBgJHtDQUNIRV9LRVlTLlBSSUNFX0hJU1RPUll9JHt1dWlkfWA7XHJcbiAgICBjb25zdCBjYWNoZWQgPSBnZXRDYWNoZWREYXRhPE1UR0pTT05DYXJkUHJpY2VzPihjYWNoZUtleSk7XHJcbiAgICBpZiAoY2FjaGVkKSByZXR1cm4gY2FjaGVkO1xyXG5cclxuICAgIC8vIFRyeSB0byBnZXQgZnJvbSBBbGxQcmljZXMgZGF0YVxyXG4gICAgY29uc3QgcHJpY2VEYXRhID0gYXdhaXQgZ2V0QWxsUHJpY2VzRGF0YSgpO1xyXG4gICAgaWYgKHByaWNlRGF0YSAmJiBwcmljZURhdGFbdXVpZF0pIHtcclxuICAgICAgY29uc3QgY2FyZFByaWNlcyA9IHByaWNlRGF0YVt1dWlkXTtcclxuICAgICAgXHJcbiAgICAgIC8vIENhY2hlIHRoZSByZXN1bHRcclxuICAgICAgc2V0Q2FjaGVkRGF0YShjYWNoZUtleSwgY2FyZFByaWNlcyk7XHJcbiAgICAgIFxyXG4gICAgICByZXR1cm4gY2FyZFByaWNlcztcclxuICAgIH1cclxuXHJcbiAgICBjb25zb2xlLmxvZyhgTm8gcHJpY2UgaGlzdG9yeSBmb3VuZCBmb3IgVVVJRCAke3V1aWR9YCk7XHJcbiAgICByZXR1cm4gbnVsbDtcclxuICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgY29uc29sZS5lcnJvcignRXJyb3IgZmV0Y2hpbmcgcHJpY2UgaGlzdG9yeTonLCBlcnJvcik7XHJcbiAgICByZXR1cm4gbnVsbDtcclxuICB9XHJcbn1cclxuXHJcbi8vIEZldGNoIGFuZCBjYWNoZSBBbGxQcmljZXMuanNvbiBkYXRhXHJcbmxldCBhbGxQcmljZXNDYWNoZTogUmVjb3JkPHN0cmluZywgTVRHSlNPTkNhcmRQcmljZXM+IHwgbnVsbCA9IG51bGw7XHJcbmxldCBhbGxQcmljZXNMb2FkaW5nUHJvbWlzZTogUHJvbWlzZTxSZWNvcmQ8c3RyaW5nLCBNVEdKU09OQ2FyZFByaWNlcz4gfCBudWxsPiB8IG51bGwgPSBudWxsO1xyXG5cclxuYXN5bmMgZnVuY3Rpb24gZ2V0QWxsUHJpY2VzRGF0YSgpOiBQcm9taXNlPFJlY29yZDxzdHJpbmcsIE1UR0pTT05DYXJkUHJpY2VzPiB8IG51bGw+IHtcclxuICAvLyBSZXR1cm4gY2FjaGVkIGRhdGEgaWYgYXZhaWxhYmxlXHJcbiAgaWYgKGFsbFByaWNlc0NhY2hlKSB7XHJcbiAgICByZXR1cm4gYWxsUHJpY2VzQ2FjaGU7XHJcbiAgfVxyXG5cclxuICAvLyBSZXR1cm4gZXhpc3RpbmcgbG9hZGluZyBwcm9taXNlIGlmIGluIHByb2dyZXNzXHJcbiAgaWYgKGFsbFByaWNlc0xvYWRpbmdQcm9taXNlKSB7XHJcbiAgICByZXR1cm4gYWxsUHJpY2VzTG9hZGluZ1Byb21pc2U7XHJcbiAgfVxyXG5cclxuICAvLyBTdGFydCBsb2FkaW5nIEFsbFByaWNlcyBkYXRhXHJcbiAgYWxsUHJpY2VzTG9hZGluZ1Byb21pc2UgPSBsb2FkQWxsUHJpY2VzRGF0YSgpO1xyXG4gIHJldHVybiBhbGxQcmljZXNMb2FkaW5nUHJvbWlzZTtcclxufVxyXG5cclxuYXN5bmMgZnVuY3Rpb24gbG9hZEFsbFByaWNlc0RhdGEoKTogUHJvbWlzZTxSZWNvcmQ8c3RyaW5nLCBNVEdKU09OQ2FyZFByaWNlcz4gfCBudWxsPiB7XHJcbiAgdHJ5IHtcclxuICAgIGNvbnNvbGUubG9nKCdMb2FkaW5nIE1UR0pTT04gQWxsUHJpY2VzIGRhdGEuLi4nKTtcclxuXHJcbiAgICAvLyBDaGVjayBpZiB3ZSBoYXZlIGNhY2hlZCBBbGxQcmljZXMgZGF0YVxyXG4gICAgY29uc3QgY2FjaGVkQWxsUHJpY2VzID0gZ2V0Q2FjaGVkRGF0YTx7XHJcbiAgICAgIGRhdGE6IFJlY29yZDxzdHJpbmcsIE1UR0pTT05DYXJkUHJpY2VzPjtcclxuICAgICAgdGltZXN0YW1wOiBudW1iZXI7XHJcbiAgICAgIHZlcnNpb246IHN0cmluZztcclxuICAgIH0+KCdtdGdqc29uLWFsbC1wcmljZXMtZGF0YScpO1xyXG5cclxuICAgIC8vIFVzZSBjYWNoZWQgZGF0YSBpZiBpdCdzIGxlc3MgdGhhbiAyNCBob3VycyBvbGRcclxuICAgIGlmIChjYWNoZWRBbGxQcmljZXMgJiYgKERhdGUubm93KCkgLSBjYWNoZWRBbGxQcmljZXMudGltZXN0YW1wKSA8IDI0ICogNjAgKiA2MCAqIDEwMDApIHtcclxuICAgICAgY29uc29sZS5sb2coJ1VzaW5nIGNhY2hlZCBBbGxQcmljZXMgZGF0YScpO1xyXG4gICAgICBhbGxQcmljZXNDYWNoZSA9IGNhY2hlZEFsbFByaWNlcy5kYXRhO1xyXG4gICAgICByZXR1cm4gYWxsUHJpY2VzQ2FjaGU7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gRmV0Y2ggZnJlc2ggQWxsUHJpY2VzIGRhdGFcclxuICAgIGNvbnNvbGUubG9nKCdGZXRjaGluZyBmcmVzaCBBbGxQcmljZXMgZGF0YSBmcm9tIE1UR0pTT04uLi4nKTtcclxuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgcmF0ZUxpbWl0ZWRGZXRjaCgnaHR0cHM6Ly9tdGdqc29uLmNvbS9hcGkvdjUvQWxsUHJpY2VzLmpzb24nKTtcclxuICAgIFxyXG4gICAgaWYgKCFyZXNwb25zZS5vaykge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYEZhaWxlZCB0byBmZXRjaCBBbGxQcmljZXM6ICR7cmVzcG9uc2Uuc3RhdHVzfSAke3Jlc3BvbnNlLnN0YXR1c1RleHR9YCk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gUGFyc2UgdGhlIEpTT04gcmVzcG9uc2VcclxuICAgIGNvbnN0IGFsbFByaWNlc1Jlc3BvbnNlID0gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xyXG4gICAgXHJcbiAgICBpZiAoIWFsbFByaWNlc1Jlc3BvbnNlLmRhdGEpIHtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIEFsbFByaWNlcyByZXNwb25zZSBmb3JtYXQnKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBDYWNoZSB0aGUgZGF0YVxyXG4gICAgY29uc3QgY2FjaGVEYXRhID0ge1xyXG4gICAgICBkYXRhOiBhbGxQcmljZXNSZXNwb25zZS5kYXRhLFxyXG4gICAgICB0aW1lc3RhbXA6IERhdGUubm93KCksXHJcbiAgICAgIHZlcnNpb246IGFsbFByaWNlc1Jlc3BvbnNlLm1ldGE/LnZlcnNpb24gfHwgJ3Vua25vd24nLFxyXG4gICAgfTtcclxuXHJcbiAgICBzZXRDYWNoZWREYXRhKCdtdGdqc29uLWFsbC1wcmljZXMtZGF0YScsIGNhY2hlRGF0YSk7XHJcbiAgICBhbGxQcmljZXNDYWNoZSA9IGFsbFByaWNlc1Jlc3BvbnNlLmRhdGE7XHJcblxyXG4gICAgY29uc29sZS5sb2coYExvYWRlZCBBbGxQcmljZXMgZGF0YSBmb3IgJHtPYmplY3Qua2V5cyhhbGxQcmljZXNDYWNoZSB8fCB7fSkubGVuZ3RofSBjYXJkc2ApO1xyXG4gICAgcmV0dXJuIGFsbFByaWNlc0NhY2hlO1xyXG4gIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICBjb25zb2xlLmVycm9yKCdGYWlsZWQgdG8gbG9hZCBBbGxQcmljZXMgZGF0YTonLCBlcnJvcik7XHJcbiAgICBcclxuICAgIC8vIFRyeSB0byB1c2Ugc3RhbGUgY2FjaGVkIGRhdGEgYXMgZmFsbGJhY2tcclxuICAgIGNvbnN0IHN0YWxlQ2FjaGUgPSBnZXRDYWNoZWREYXRhPHtcclxuICAgICAgZGF0YTogUmVjb3JkPHN0cmluZywgTVRHSlNPTkNhcmRQcmljZXM+O1xyXG4gICAgICB0aW1lc3RhbXA6IG51bWJlcjtcclxuICAgIH0+KCdtdGdqc29uLWFsbC1wcmljZXMtZGF0YScpO1xyXG5cclxuICAgIGlmIChzdGFsZUNhY2hlKSB7XHJcbiAgICAgIGNvbnNvbGUud2FybignVXNpbmcgc3RhbGUgQWxsUHJpY2VzIGNhY2hlIGR1ZSB0byBmZXRjaCBmYWlsdXJlJyk7XHJcbiAgICAgIGFsbFByaWNlc0NhY2hlID0gc3RhbGVDYWNoZS5kYXRhO1xyXG4gICAgICByZXR1cm4gYWxsUHJpY2VzQ2FjaGU7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIG51bGw7XHJcbiAgfSBmaW5hbGx5IHtcclxuICAgIGFsbFByaWNlc0xvYWRpbmdQcm9taXNlID0gbnVsbDtcclxuICB9XHJcbn1cclxuXHJcbi8vIENvbnZlcnQgTVRHSlNPTiBwcmljZSBkYXRhIHRvIG91ciBpbnRlcm5hbCBmb3JtYXRcclxuZXhwb3J0IGZ1bmN0aW9uIGNvbnZlcnRNVEdKU09OUHJpY2VzKFxyXG4gIHV1aWQ6IHN0cmluZyxcclxuICBtdGdqc29uUHJpY2VzOiBNVEdKU09OQ2FyZFByaWNlcyxcclxuICBjYXJkTmFtZTogc3RyaW5nXHJcbik6IFByb2Nlc3NlZENhcmRQcmljZVtdIHtcclxuICBjb25zdCBwcm9jZXNzZWRQcmljZXM6IFByb2Nlc3NlZENhcmRQcmljZVtdID0gW107XHJcbiAgXHJcbiAgdHJ5IHtcclxuICAgIC8vIEdldCB0aGUgcHJlZmVycmVkIHByb3ZpZGVyJ3MgZGF0YVxyXG4gICAgY29uc3QgcHJvdmlkZXIgPSBNVEdKU09OX0NPTkZJRy5wcmVmZXJyZWRQcm92aWRlcjtcclxuICAgIGNvbnN0IHBhcGVyUHJpY2VzID0gbXRnanNvblByaWNlcy5wYXBlcj8uW3Byb3ZpZGVyXTtcclxuICAgIFxyXG4gICAgaWYgKHBhcGVyUHJpY2VzPy5ub3JtYWwpIHtcclxuICAgICAgcGFwZXJQcmljZXMubm9ybWFsLmZvckVhY2gocHJpY2VQb2ludCA9PiB7XHJcbiAgICAgICAgcHJvY2Vzc2VkUHJpY2VzLnB1c2goe1xyXG4gICAgICAgICAgY2FyZElkOiB1dWlkLFxyXG4gICAgICAgICAgZGF0ZTogcHJpY2VQb2ludC5kYXRlLFxyXG4gICAgICAgICAgcHJpY2U6IHByaWNlUG9pbnQucHJpY2UsXHJcbiAgICAgICAgICBwcmljZVR5cGU6ICd1c2QnLFxyXG4gICAgICAgIH0pO1xyXG4gICAgICB9KTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgaWYgKHBhcGVyUHJpY2VzPy5mb2lsKSB7XHJcbiAgICAgIHBhcGVyUHJpY2VzLmZvaWwuZm9yRWFjaChwcmljZVBvaW50ID0+IHtcclxuICAgICAgICBwcm9jZXNzZWRQcmljZXMucHVzaCh7XHJcbiAgICAgICAgICBjYXJkSWQ6IHV1aWQsXHJcbiAgICAgICAgICBkYXRlOiBwcmljZVBvaW50LmRhdGUsXHJcbiAgICAgICAgICBwcmljZTogcHJpY2VQb2ludC5wcmljZSxcclxuICAgICAgICAgIHByaWNlVHlwZTogJ3VzZEZvaWwnLFxyXG4gICAgICAgIH0pO1xyXG4gICAgICB9KTtcclxuICAgIH1cclxuICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgY29uc29sZS5lcnJvcihgRXJyb3IgY29udmVydGluZyBNVEdKU09OIHByaWNlcyBmb3IgJHtjYXJkTmFtZX06YCwgZXJyb3IpO1xyXG4gIH1cclxuICBcclxuICByZXR1cm4gcHJvY2Vzc2VkUHJpY2VzLnNvcnQoKGEsIGIpID0+IG5ldyBEYXRlKGEuZGF0ZSkuZ2V0VGltZSgpIC0gbmV3IERhdGUoYi5kYXRlKS5nZXRUaW1lKCkpO1xyXG59XHJcblxyXG4vLyBHZXQgcHJpY2UgaGlzdG9yeSBmb3IgYSBTY3J5ZmFsbCBjYXJkXHJcbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRQcmljZUhpc3RvcnlGb3JDYXJkKHNjcnlmYWxsQ2FyZDogTVRHQ2FyZCk6IFByb21pc2U8UHJpY2VIaXN0b3J5IHwgbnVsbD4ge1xyXG4gIHRyeSB7XHJcbiAgICAvLyBGaXJzdCwgZ2V0IHRoZSBNVEdKU09OIFVVSUQgbWFwcGluZ1xyXG4gICAgY29uc3QgdXVpZCA9IGF3YWl0IGdldENhcmRNYXBwaW5nKHNjcnlmYWxsQ2FyZCk7XHJcbiAgICBpZiAoIXV1aWQpIHtcclxuICAgICAgY29uc29sZS5sb2coYE5vIE1UR0pTT04gbWFwcGluZyBmb3VuZCBmb3IgJHtzY3J5ZmFsbENhcmQubmFtZX1gKTtcclxuICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gRmV0Y2ggdGhlIHByaWNlIGhpc3RvcnlcclxuICAgIGNvbnN0IG10Z2pzb25QcmljZXMgPSBhd2FpdCBmZXRjaFByaWNlSGlzdG9yeUJ5VVVJRCh1dWlkKTtcclxuICAgIGlmICghbXRnanNvblByaWNlcykge1xyXG4gICAgICByZXR1cm4gbnVsbDtcclxuICAgIH1cclxuXHJcbiAgICAvLyBDb252ZXJ0IHRvIG91ciBpbnRlcm5hbCBmb3JtYXRcclxuICAgIGNvbnN0IHByb2Nlc3NlZFByaWNlcyA9IGNvbnZlcnRNVEdKU09OUHJpY2VzKHV1aWQsIG10Z2pzb25QcmljZXMsIHNjcnlmYWxsQ2FyZC5uYW1lKTtcclxuICAgIFxyXG4gICAgaWYgKHByb2Nlc3NlZFByaWNlcy5sZW5ndGggPT09IDApIHtcclxuICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gQ2FsY3VsYXRlIHRyZW5kIGFuZCB2b2xhdGlsaXR5XHJcbiAgICBjb25zdCBwcmljZXMgPSBwcm9jZXNzZWRQcmljZXMubWFwKHAgPT4gcC5wcmljZSk7XHJcbiAgICBjb25zdCBhdmVyYWdlUHJpY2UgPSBwcmljZXMucmVkdWNlKChzdW0sIHByaWNlKSA9PiBzdW0gKyBwcmljZSwgMCkgLyBwcmljZXMubGVuZ3RoO1xyXG4gICAgXHJcbiAgICAvLyBTaW1wbGUgdHJlbmQgY2FsY3VsYXRpb24gKGxhc3QgNyBkYXlzIHZzIHByZXZpb3VzIDcgZGF5cylcclxuICAgIGNvbnN0IHJlY2VudCA9IHByaWNlcy5zbGljZSgtNyk7XHJcbiAgICBjb25zdCBwcmV2aW91cyA9IHByaWNlcy5zbGljZSgtMTQsIC03KTtcclxuICAgIGNvbnN0IHJlY2VudEF2ZyA9IHJlY2VudC5yZWR1Y2UoKHN1bSwgcCkgPT4gc3VtICsgcCwgMCkgLyByZWNlbnQubGVuZ3RoO1xyXG4gICAgY29uc3QgcHJldmlvdXNBdmcgPSBwcmV2aW91cy5yZWR1Y2UoKHN1bSwgcCkgPT4gc3VtICsgcCwgMCkgLyBwcmV2aW91cy5sZW5ndGg7XHJcbiAgICBcclxuICAgIGNvbnN0IHRyZW5kOiAndXAnIHwgJ2Rvd24nIHwgJ3N0YWJsZScgPSBcclxuICAgICAgcmVjZW50QXZnID4gcHJldmlvdXNBdmcgKiAxLjA1ID8gJ3VwJyA6XHJcbiAgICAgIHJlY2VudEF2ZyA8IHByZXZpb3VzQXZnICogMC45NSA/ICdkb3duJyA6ICdzdGFibGUnO1xyXG5cclxuICAgIC8vIENhbGN1bGF0ZSB2b2xhdGlsaXR5IChzdGFuZGFyZCBkZXZpYXRpb24pXHJcbiAgICBjb25zdCB2YXJpYW5jZSA9IHByaWNlcy5yZWR1Y2UoKHN1bSwgcHJpY2UpID0+IHN1bSArIE1hdGgucG93KHByaWNlIC0gYXZlcmFnZVByaWNlLCAyKSwgMCkgLyBwcmljZXMubGVuZ3RoO1xyXG4gICAgY29uc3Qgdm9sYXRpbGl0eSA9IE1hdGguc3FydCh2YXJpYW5jZSk7XHJcblxyXG4gICAgLy8gQ2FsY3VsYXRlIHBlcmNlbnRhZ2UgY2hhbmdlc1xyXG4gICAgY29uc3QgcGVyY2VudENoYW5nZTI0aCA9IHByaWNlcy5sZW5ndGggPj0gMiA/IFxyXG4gICAgICAoKHByaWNlc1twcmljZXMubGVuZ3RoIC0gMV0gLSBwcmljZXNbcHJpY2VzLmxlbmd0aCAtIDJdKSAvIHByaWNlc1twcmljZXMubGVuZ3RoIC0gMl0pICogMTAwIDogdW5kZWZpbmVkO1xyXG4gICAgXHJcbiAgICBjb25zdCBwZXJjZW50Q2hhbmdlN2QgPSByZWNlbnQubGVuZ3RoID4gMCAmJiBwcmV2aW91cy5sZW5ndGggPiAwID8gXHJcbiAgICAgICgocmVjZW50QXZnIC0gcHJldmlvdXNBdmcpIC8gcHJldmlvdXNBdmcpICogMTAwIDogdW5kZWZpbmVkO1xyXG5cclxuICAgIHJldHVybiB7XHJcbiAgICAgIGNhcmRJZDogc2NyeWZhbGxDYXJkLmlkLFxyXG4gICAgICB1dWlkLFxyXG4gICAgICBwcmljZXM6IHByb2Nlc3NlZFByaWNlcyxcclxuICAgICAgdHJlbmQsXHJcbiAgICAgIHZvbGF0aWxpdHksXHJcbiAgICAgIGF2ZXJhZ2VQcmljZSxcclxuICAgICAgcGVyY2VudENoYW5nZTI0aCxcclxuICAgICAgcGVyY2VudENoYW5nZTdkLFxyXG4gICAgICBsYXN0VXBkYXRlZDogbmV3IERhdGUoKS50b0lTT1N0cmluZygpLFxyXG4gICAgICBwcm92aWRlcjogJ210Z2pzb24nLFxyXG4gICAgfTtcclxuICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgY29uc29sZS5lcnJvcihgRXJyb3IgZ2V0dGluZyBwcmljZSBoaXN0b3J5IGZvciAke3NjcnlmYWxsQ2FyZC5uYW1lfTpgLCBlcnJvcik7XHJcbiAgICByZXR1cm4gbnVsbDtcclxuICB9XHJcbn1cclxuXHJcbi8vIEJhdGNoIGZldGNoIHByaWNlIGhpc3RvcmllcyBmb3IgbXVsdGlwbGUgY2FyZHNcclxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGJhdGNoR2V0UHJpY2VIaXN0b3JpZXMoY2FyZHM6IE1UR0NhcmRbXSk6IFByb21pc2U8TWFwPHN0cmluZywgUHJpY2VIaXN0b3J5Pj4ge1xyXG4gIGNvbnN0IHJlc3VsdHMgPSBuZXcgTWFwPHN0cmluZywgUHJpY2VIaXN0b3J5PigpO1xyXG4gIFxyXG4gIC8vIFByb2Nlc3MgY2FyZHMgaW4gYmF0Y2hlcyB0byBhdm9pZCBvdmVyd2hlbG1pbmcgdGhlIHN5c3RlbVxyXG4gIGNvbnN0IGJhdGNoU2l6ZSA9IDEwO1xyXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgY2FyZHMubGVuZ3RoOyBpICs9IGJhdGNoU2l6ZSkge1xyXG4gICAgY29uc3QgYmF0Y2ggPSBjYXJkcy5zbGljZShpLCBpICsgYmF0Y2hTaXplKTtcclxuICAgIFxyXG4gICAgY29uc3QgYmF0Y2hQcm9taXNlcyA9IGJhdGNoLm1hcChhc3luYyAoY2FyZCkgPT4ge1xyXG4gICAgICBjb25zdCBoaXN0b3J5ID0gYXdhaXQgZ2V0UHJpY2VIaXN0b3J5Rm9yQ2FyZChjYXJkKTtcclxuICAgICAgaWYgKGhpc3RvcnkpIHtcclxuICAgICAgICByZXN1bHRzLnNldChjYXJkLmlkLCBoaXN0b3J5KTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgICBcclxuICAgIGF3YWl0IFByb21pc2UuYWxsKGJhdGNoUHJvbWlzZXMpO1xyXG4gICAgXHJcbiAgICAvLyBBZGQgYSBzbWFsbCBkZWxheSBiZXR3ZWVuIGJhdGNoZXNcclxuICAgIGlmIChpICsgYmF0Y2hTaXplIDwgY2FyZHMubGVuZ3RoKSB7XHJcbiAgICAgIGF3YWl0IG5ldyBQcm9taXNlKHJlc29sdmUgPT4gc2V0VGltZW91dChyZXNvbHZlLCAxMDAwKSk7XHJcbiAgICB9XHJcbiAgfVxyXG4gIFxyXG4gIHJldHVybiByZXN1bHRzO1xyXG59XHJcblxyXG4vLyBVdGlsaXR5IGZ1bmN0aW9uIHRvIGNsZWFyIE1UR0pTT04gY2FjaGVcclxuZXhwb3J0IGZ1bmN0aW9uIGNsZWFyTVRHSlNPTkNhY2hlKCk6IHZvaWQge1xyXG4gIGlmICh0eXBlb2Ygd2luZG93ID09PSAndW5kZWZpbmVkJykgcmV0dXJuO1xyXG4gIFxyXG4gIHRyeSB7XHJcbiAgICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMobG9jYWxTdG9yYWdlKTtcclxuICAgIGtleXMuZm9yRWFjaChrZXkgPT4ge1xyXG4gICAgICBpZiAoa2V5LnN0YXJ0c1dpdGgoJ210Z2pzb24tJykpIHtcclxuICAgICAgICBsb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbShrZXkpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICAgIGNvbnNvbGUubG9nKCdNVEdKU09OIGNhY2hlIGNsZWFyZWQnKTtcclxuICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgY29uc29sZS5lcnJvcignRXJyb3IgY2xlYXJpbmcgTVRHSlNPTiBjYWNoZTonLCBlcnJvcik7XHJcbiAgfVxyXG59XHJcblxyXG4vLyBHZXQgY2FjaGUgc3RhdGlzdGljc1xyXG5leHBvcnQgZnVuY3Rpb24gZ2V0TVRHSlNPTkNhY2hlU3RhdHMoKSB7XHJcbiAgaWYgKHR5cGVvZiB3aW5kb3cgPT09ICd1bmRlZmluZWQnKSByZXR1cm4gbnVsbDtcclxuICBcclxuICB0cnkge1xyXG4gICAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKGxvY2FsU3RvcmFnZSk7XHJcbiAgICBjb25zdCBtdGdqc29uS2V5cyA9IGtleXMuZmlsdGVyKGtleSA9PiBrZXkuc3RhcnRzV2l0aCgnbXRnanNvbi0nKSk7XHJcbiAgICBcclxuICAgIGxldCB0b3RhbFNpemUgPSAwO1xyXG4gICAgY29uc3QgY2FjaGVFbnRyaWVzID0gbXRnanNvbktleXMubWFwKGtleSA9PiB7XHJcbiAgICAgIGNvbnN0IGRhdGEgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbShrZXkpO1xyXG4gICAgICBjb25zdCBzaXplID0gZGF0YSA/IGRhdGEubGVuZ3RoIDogMDtcclxuICAgICAgdG90YWxTaXplICs9IHNpemU7XHJcbiAgICAgIFxyXG4gICAgICByZXR1cm4ge1xyXG4gICAgICAgIGtleSxcclxuICAgICAgICBzaXplLFxyXG4gICAgICAgIHNpemVGb3JtYXR0ZWQ6IGAkeyhzaXplIC8gMTAyNCkudG9GaXhlZCgyKX0gS0JgLFxyXG4gICAgICB9O1xyXG4gICAgfSk7XHJcbiAgICBcclxuICAgIHJldHVybiB7XHJcbiAgICAgIHRvdGFsRW50cmllczogbXRnanNvbktleXMubGVuZ3RoLFxyXG4gICAgICB0b3RhbFNpemUsXHJcbiAgICAgIHRvdGFsU2l6ZUZvcm1hdHRlZDogYCR7KHRvdGFsU2l6ZSAvIDEwMjQgLyAxMDI0KS50b0ZpeGVkKDIpfSBNQmAsXHJcbiAgICAgIGVudHJpZXM6IGNhY2hlRW50cmllcyxcclxuICAgIH07XHJcbiAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGdldHRpbmcgY2FjaGUgc3RhdHM6JywgZXJyb3IpO1xyXG4gICAgcmV0dXJuIG51bGw7XHJcbiAgfVxyXG59XHJcblxyXG4vLyBFeHBvcnQgY29uZmlndXJhdGlvbiBmb3IgZXh0ZXJuYWwgdXNlXHJcbmV4cG9ydCB7IE1UR0pTT05fQ09ORklHIH07XHJcbiJdLCJuYW1lcyI6WyJNVEdKU09OX0NPTkZJRyIsImJhc2VVcmwiLCJjYWNoZUV4cGlyeSIsInByZWZlcnJlZFByb3ZpZGVyIiwiZW5hYmxlQ2FjaGluZyIsIkNBQ0hFX0tFWVMiLCJBTExfUFJJQ0VTIiwiQ0FSRF9NQVBQSU5HUyIsIlBSSUNFX0hJU1RPUlkiLCJSQVRFX0xJTUlUX0RFTEFZIiwibGFzdFJlcXVlc3RUaW1lIiwicmF0ZUxpbWl0ZWRGZXRjaCIsInVybCIsIm5vdyIsIkRhdGUiLCJ0aW1lU2luY2VMYXN0UmVxdWVzdCIsIlByb21pc2UiLCJyZXNvbHZlIiwic2V0VGltZW91dCIsImNvbnNvbGUiLCJsb2ciLCJyZXNwb25zZSIsImZldGNoIiwib2siLCJFcnJvciIsInN0YXR1cyIsInN0YXR1c1RleHQiLCJlcnJvciIsIm1lc3NhZ2UiLCJ0aW1lc3RhbXAiLCJ0b0lTT1N0cmluZyIsImluY2x1ZGVzIiwiZ2V0Q2FjaGVkRGF0YSIsImtleSIsImNhY2hlZCIsImxvY2FsU3RvcmFnZSIsImdldEl0ZW0iLCJwYXJzZWQiLCJKU09OIiwicGFyc2UiLCJleHBpcmVzQXQiLCJyZW1vdmVJdGVtIiwiZGF0YSIsInNldENhY2hlZERhdGEiLCJjdXN0b21FeHBpcnkiLCJleHBpcnkiLCJjYWNoZUVudHJ5IiwiY2FjaGVkQXQiLCJzZXRJdGVtIiwic3RyaW5naWZ5IiwiY2FyZE1hcHBpbmdTZXJ2aWNlIiwiZ2V0Q2FyZE1hcHBpbmciLCJzY3J5ZmFsbENhcmQiLCJ1dWlkIiwiZ2V0TWFwcGluZyIsImNhY2hlS2V5IiwiaWQiLCJuYW1lIiwiZmV0Y2hQcmljZUhpc3RvcnlCeVVVSUQiLCJwcmljZURhdGEiLCJnZXRBbGxQcmljZXNEYXRhIiwiY2FyZFByaWNlcyIsImFsbFByaWNlc0NhY2hlIiwiYWxsUHJpY2VzTG9hZGluZ1Byb21pc2UiLCJsb2FkQWxsUHJpY2VzRGF0YSIsImNhY2hlZEFsbFByaWNlcyIsImFsbFByaWNlc1Jlc3BvbnNlIiwianNvbiIsImNhY2hlRGF0YSIsInZlcnNpb24iLCJtZXRhIiwiT2JqZWN0Iiwia2V5cyIsImxlbmd0aCIsInN0YWxlQ2FjaGUiLCJ3YXJuIiwiY29udmVydE1UR0pTT05QcmljZXMiLCJtdGdqc29uUHJpY2VzIiwiY2FyZE5hbWUiLCJwcm9jZXNzZWRQcmljZXMiLCJwcm92aWRlciIsInBhcGVyUHJpY2VzIiwicGFwZXIiLCJub3JtYWwiLCJmb3JFYWNoIiwicHJpY2VQb2ludCIsInB1c2giLCJjYXJkSWQiLCJkYXRlIiwicHJpY2UiLCJwcmljZVR5cGUiLCJmb2lsIiwic29ydCIsImEiLCJiIiwiZ2V0VGltZSIsImdldFByaWNlSGlzdG9yeUZvckNhcmQiLCJwcmljZXMiLCJtYXAiLCJwIiwiYXZlcmFnZVByaWNlIiwicmVkdWNlIiwic3VtIiwicmVjZW50Iiwic2xpY2UiLCJwcmV2aW91cyIsInJlY2VudEF2ZyIsInByZXZpb3VzQXZnIiwidHJlbmQiLCJ2YXJpYW5jZSIsIk1hdGgiLCJwb3ciLCJ2b2xhdGlsaXR5Iiwic3FydCIsInBlcmNlbnRDaGFuZ2UyNGgiLCJ1bmRlZmluZWQiLCJwZXJjZW50Q2hhbmdlN2QiLCJsYXN0VXBkYXRlZCIsImJhdGNoR2V0UHJpY2VIaXN0b3JpZXMiLCJjYXJkcyIsInJlc3VsdHMiLCJNYXAiLCJiYXRjaFNpemUiLCJpIiwiYmF0Y2giLCJiYXRjaFByb21pc2VzIiwiY2FyZCIsImhpc3RvcnkiLCJzZXQiLCJhbGwiLCJjbGVhck1UR0pTT05DYWNoZSIsInN0YXJ0c1dpdGgiLCJnZXRNVEdKU09OQ2FjaGVTdGF0cyIsIm10Z2pzb25LZXlzIiwiZmlsdGVyIiwidG90YWxTaXplIiwiY2FjaGVFbnRyaWVzIiwic2l6ZSIsInNpemVGb3JtYXR0ZWQiLCJ0b0ZpeGVkIiwidG90YWxFbnRyaWVzIiwidG90YWxTaXplRm9ybWF0dGVkIiwiZW50cmllcyJdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./src/lib/api/mtgjson.ts\n");

/***/ }),

/***/ "(ssr)/./src/lib/services/cardMappingService.ts":
/*!************************************************!*\
  !*** ./src/lib/services/cardMappingService.ts ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   cardMappingService: () => (/* binding */ cardMappingService)\n/* harmony export */ });\n/* harmony import */ var _lib_utils_mtgjsonCache__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/lib/utils/mtgjsonCache */ \"(ssr)/./src/lib/utils/mtgjsonCache.ts\");\n\nclass CardMappingService {\n    /**\r\n   * Initialize the mapping service by loading AllPrintings data\r\n   */ async initialize() {\n        if (this.loadingPromise) {\n            return this.loadingPromise;\n        }\n        this.loadingPromise = this.loadAllPrintingsData();\n        return this.loadingPromise;\n    }\n    /**\r\n   * Load and cache AllPrintings.json data\r\n   */ async loadAllPrintingsData() {\n        try {\n            console.log('Loading MTGJSON AllPrintings data...');\n            // Try to load from cache first\n            const cached = await this.getCachedAllPrintings();\n            if (cached && this.isDataFresh(cached.meta.date)) {\n                this.allPrintingsData = cached;\n                console.log('Loaded AllPrintings from cache');\n                await this.loadMappingCache();\n                return;\n            }\n            // Fetch fresh data from MTGJSON\n            console.log('Fetching fresh AllPrintings data from MTGJSON...');\n            const response = await fetch(this.MTGJSON_ALL_PRINTINGS_URL);\n            if (!response.ok) {\n                throw new Error(`Failed to fetch AllPrintings: ${response.status} ${response.statusText}`);\n            }\n            // Parse the response\n            const data = await response.json();\n            if (!data.data || !data.meta) {\n                throw new Error('Invalid AllPrintings response format');\n            }\n            this.allPrintingsData = data;\n            // Store using the optimized storage system\n            const { allPrintingsStorage } = await __webpack_require__.e(/*! import() */ \"_ssr_src_lib_utils_allPrintingsStorage_ts\").then(__webpack_require__.bind(__webpack_require__, /*! @/lib/utils/allPrintingsStorage */ \"(ssr)/./src/lib/utils/allPrintingsStorage.ts\"));\n            await allPrintingsStorage.storeAllPrintings(data);\n            await this.loadMappingCache();\n            console.log(`Loaded ${Object.keys(data.data).length} sets from MTGJSON`);\n        } catch (error) {\n            console.error('Failed to load AllPrintings data:', error);\n            // Try to use optimized storage as fallback\n            try {\n                const { allPrintingsStorage } = await __webpack_require__.e(/*! import() */ \"_ssr_src_lib_utils_allPrintingsStorage_ts\").then(__webpack_require__.bind(__webpack_require__, /*! @/lib/utils/allPrintingsStorage */ \"(ssr)/./src/lib/utils/allPrintingsStorage.ts\"));\n                const isAvailable = await allPrintingsStorage.isDataAvailable();\n                if (isAvailable) {\n                    console.log('Using stored AllPrintings data as fallback');\n                    // We'll work with the stored data without loading everything into memory\n                    await this.loadMappingCache();\n                    return;\n                }\n            } catch (storageError) {\n                console.error('Failed to access stored AllPrintings data:', storageError);\n            }\n            throw new Error('Failed to load AllPrintings data and no cache available');\n        }\n    }\n    /**\r\n   * Get the MTGJSON UUID for a Scryfall card\r\n   */ async getMapping(scryfallCard) {\n        await this.initialize();\n        // Check cache first\n        const cached = this.mappingCache.get(scryfallCard.id);\n        if (cached) {\n            return cached.mtgjsonUuid;\n        }\n        // Try to find mapping\n        const mapping = await this.findCardMapping(scryfallCard);\n        if (mapping) {\n            // Cache the mapping\n            this.mappingCache.set(scryfallCard.id, mapping);\n            await this.saveMappingToCache(mapping);\n            return mapping.mtgjsonUuid;\n        }\n        return null;\n    }\n    /**\r\n   * Find mapping for a Scryfall card using multiple strategies\r\n   */ async findCardMapping(scryfallCard) {\n        // First try with in-memory AllPrintings data if available\n        if (this.allPrintingsData) {\n            const strategies = [\n                ()=>this.findByDirectScryfallId(scryfallCard),\n                ()=>this.findByNameAndSet(scryfallCard),\n                ()=>this.findByCollectorNumber(scryfallCard),\n                ()=>this.findByFuzzyName(scryfallCard)\n            ];\n            for (const strategy of strategies){\n                const result = strategy();\n                if (result) {\n                    return result;\n                }\n            }\n        }\n        // Fallback to optimized storage search\n        try {\n            const { allPrintingsStorage } = await __webpack_require__.e(/*! import() */ \"_ssr_src_lib_utils_allPrintingsStorage_ts\").then(__webpack_require__.bind(__webpack_require__, /*! @/lib/utils/allPrintingsStorage */ \"(ssr)/./src/lib/utils/allPrintingsStorage.ts\"));\n            // Strategy 1: Direct Scryfall ID search\n            if (scryfallCard.scryfallId) {\n                const card = await allPrintingsStorage.findCardByScryfallId(scryfallCard.scryfallId);\n                if (card) {\n                    return {\n                        scryfallId: scryfallCard.id,\n                        mtgjsonUuid: card.uuid,\n                        confidence: 1.0,\n                        matchMethod: 'direct',\n                        lastUpdated: new Date().toISOString()\n                    };\n                }\n            }\n            // Strategy 2: Search by name and try to match with set\n            const searchResults = await allPrintingsStorage.searchCards(scryfallCard.name, 20);\n            for (const card of searchResults){\n                // Exact name and set match\n                if (this.normalizeCardName(card.name) === this.normalizeCardName(scryfallCard.name) && card.setCode.toLowerCase() === scryfallCard.setCode.toLowerCase()) {\n                    return {\n                        scryfallId: scryfallCard.id,\n                        mtgjsonUuid: card.uuid,\n                        confidence: 0.95,\n                        matchMethod: 'name_set',\n                        lastUpdated: new Date().toISOString()\n                    };\n                }\n                // Collector number match within same set\n                if (card.setCode.toLowerCase() === scryfallCard.setCode.toLowerCase() && card.number.toLowerCase() === (scryfallCard.number || '').toLowerCase()) {\n                    const nameSimilarity = this.calculateNameSimilarity(scryfallCard.name, card.name);\n                    if (nameSimilarity > 0.8) {\n                        return {\n                            scryfallId: scryfallCard.id,\n                            mtgjsonUuid: card.uuid,\n                            confidence: 0.9,\n                            matchMethod: 'collector_number',\n                            lastUpdated: new Date().toISOString()\n                        };\n                    }\n                }\n                // Fuzzy name match\n                const similarity = this.calculateNameSimilarity(scryfallCard.name, card.name);\n                if (similarity > 0.9) {\n                    return {\n                        scryfallId: scryfallCard.id,\n                        mtgjsonUuid: card.uuid,\n                        confidence: similarity * 0.8,\n                        matchMethod: 'name_fuzzy',\n                        lastUpdated: new Date().toISOString()\n                    };\n                }\n            }\n        } catch (error) {\n            console.error('Error searching optimized storage:', error);\n        }\n        console.warn(`No mapping found for card: ${scryfallCard.name} (${scryfallCard.setCode})`);\n        return null;\n    }\n    /**\r\n   * Strategy 1: Direct Scryfall ID match (most reliable)\r\n   */ findByDirectScryfallId(scryfallCard) {\n        if (!scryfallCard.scryfallId) return null;\n        for (const set of Object.values(this.allPrintingsData.data)){\n            for (const card of set.cards){\n                if (card.identifiers?.scryfallId === scryfallCard.scryfallId) {\n                    return {\n                        scryfallId: scryfallCard.id,\n                        mtgjsonUuid: card.uuid,\n                        confidence: 1.0,\n                        matchMethod: 'direct',\n                        lastUpdated: new Date().toISOString()\n                    };\n                }\n            }\n        }\n        return null;\n    }\n    /**\r\n   * Strategy 2: Match by exact name and set code\r\n   */ findByNameAndSet(scryfallCard) {\n        const normalizedName = this.normalizeCardName(scryfallCard.name);\n        const setCode = scryfallCard.setCode.toLowerCase();\n        for (const set of Object.values(this.allPrintingsData.data)){\n            if (set.code.toLowerCase() !== setCode) continue;\n            for (const card of set.cards){\n                const cardNormalizedName = this.normalizeCardName(card.name);\n                if (cardNormalizedName === normalizedName) {\n                    return {\n                        scryfallId: scryfallCard.id,\n                        mtgjsonUuid: card.uuid,\n                        confidence: 0.95,\n                        matchMethod: 'name_set',\n                        lastUpdated: new Date().toISOString()\n                    };\n                }\n            }\n        }\n        return null;\n    }\n    /**\r\n   * Strategy 3: Match by collector number and set\r\n   */ findByCollectorNumber(scryfallCard) {\n        if (!scryfallCard.number) return null;\n        const setCode = scryfallCard.setCode.toLowerCase();\n        const collectorNumber = scryfallCard.number.toLowerCase();\n        for (const set of Object.values(this.allPrintingsData.data)){\n            if (set.code.toLowerCase() !== setCode) continue;\n            for (const card of set.cards){\n                if (card.number.toLowerCase() === collectorNumber) {\n                    // Also check if names are similar to avoid false positives\n                    const nameSimilarity = this.calculateNameSimilarity(scryfallCard.name, card.name);\n                    if (nameSimilarity > 0.8) {\n                        return {\n                            scryfallId: scryfallCard.id,\n                            mtgjsonUuid: card.uuid,\n                            confidence: 0.9,\n                            matchMethod: 'collector_number',\n                            lastUpdated: new Date().toISOString()\n                        };\n                    }\n                }\n            }\n        }\n        return null;\n    }\n    /**\r\n   * Strategy 4: Fuzzy name matching (least reliable)\r\n   */ findByFuzzyName(scryfallCard) {\n        const normalizedName = this.normalizeCardName(scryfallCard.name);\n        let bestMatch = null;\n        for (const set of Object.values(this.allPrintingsData.data)){\n            for (const card of set.cards){\n                const cardNormalizedName = this.normalizeCardName(card.name);\n                const similarity = this.calculateNameSimilarity(normalizedName, cardNormalizedName);\n                if (similarity > 0.9 && (!bestMatch || similarity > bestMatch.similarity)) {\n                    bestMatch = {\n                        card,\n                        similarity\n                    };\n                }\n            }\n        }\n        if (bestMatch && bestMatch.similarity > 0.9) {\n            return {\n                scryfallId: scryfallCard.id,\n                mtgjsonUuid: bestMatch.card.uuid,\n                confidence: bestMatch.similarity * 0.8,\n                matchMethod: 'name_fuzzy',\n                lastUpdated: new Date().toISOString()\n            };\n        }\n        return null;\n    }\n    /**\r\n   * Normalize card names for comparison\r\n   */ normalizeCardName(name) {\n        return name.toLowerCase().replace(/[^\\w\\s]/g, '') // Remove special characters\n        .replace(/\\s+/g, ' ') // Normalize whitespace\n        .trim();\n    }\n    /**\r\n   * Calculate similarity between two strings using Levenshtein distance\r\n   */ calculateNameSimilarity(str1, str2) {\n        const len1 = str1.length;\n        const len2 = str2.length;\n        if (len1 === 0) return len2 === 0 ? 1 : 0;\n        if (len2 === 0) return 0;\n        const matrix = [];\n        // Initialize matrix\n        for(let i = 0; i <= len1; i++){\n            matrix[i] = [\n                i\n            ];\n        }\n        for(let j = 0; j <= len2; j++){\n            matrix[0][j] = j;\n        }\n        // Fill matrix\n        for(let i = 1; i <= len1; i++){\n            for(let j = 1; j <= len2; j++){\n                const cost = str1[i - 1] === str2[j - 1] ? 0 : 1;\n                matrix[i][j] = Math.min(matrix[i - 1][j] + 1, matrix[i][j - 1] + 1, matrix[i - 1][j - 1] + cost // substitution\n                );\n            }\n        }\n        const distance = matrix[len1][len2];\n        const maxLength = Math.max(len1, len2);\n        return 1 - distance / maxLength;\n    }\n    /**\r\n   * Cache AllPrintings data\r\n   */ async cacheAllPrintings(data) {\n        try {\n            // Store in IndexedDB via mtgjsonCache\n            await _lib_utils_mtgjsonCache__WEBPACK_IMPORTED_MODULE_0__.mtgjsonCache.setMetadata({\n                lastPriceUpdate: data.meta.date,\n                totalCards: this.countTotalCards(data),\n                cacheVersion: data.meta.version\n            });\n            // For now, we'll store a subset of the data to avoid storage issues\n            // In production, you might want to use a more sophisticated storage strategy\n            console.log('AllPrintings data cached successfully');\n        } catch (error) {\n            console.error('Failed to cache AllPrintings data:', error);\n        }\n    }\n    /**\r\n   * Get cached AllPrintings data\r\n   */ async getCachedAllPrintings() {\n        try {\n            // This is a placeholder - in reality, you'd need to implement\n            // efficient storage and retrieval of the large AllPrintings dataset\n            return null;\n        } catch (error) {\n            console.error('Failed to get cached AllPrintings:', error);\n            return null;\n        }\n    }\n    /**\r\n   * Load mapping cache from storage\r\n   */ async loadMappingCache() {\n        try {\n            // Load existing mappings from localStorage or IndexedDB\n            const cached = localStorage.getItem(this.MAPPING_CACHE_KEY);\n            if (cached) {\n                const mappings = JSON.parse(cached);\n                for (const mapping of mappings){\n                    this.mappingCache.set(mapping.scryfallId, mapping);\n                }\n                console.log(`Loaded ${mappings.length} cached mappings`);\n            }\n        } catch (error) {\n            console.error('Failed to load mapping cache:', error);\n        }\n    }\n    /**\r\n   * Save a single mapping to cache\r\n   */ async saveMappingToCache(mapping) {\n        try {\n            // Save to localStorage (for now)\n            const existingMappings = this.getAllCachedMappings();\n            const updatedMappings = existingMappings.filter((m)=>m.scryfallId !== mapping.scryfallId);\n            updatedMappings.push(mapping);\n            localStorage.setItem(this.MAPPING_CACHE_KEY, JSON.stringify(updatedMappings));\n        } catch (error) {\n            console.error('Failed to save mapping to cache:', error);\n        }\n    }\n    /**\r\n   * Get all cached mappings\r\n   */ getAllCachedMappings() {\n        try {\n            const cached = localStorage.getItem(this.MAPPING_CACHE_KEY);\n            return cached ? JSON.parse(cached) : [];\n        } catch (error) {\n            console.error('Failed to get cached mappings:', error);\n            return [];\n        }\n    }\n    /**\r\n   * Check if data is fresh (within 7 days)\r\n   */ isDataFresh(dateString) {\n        const dataDate = new Date(dateString);\n        const now = new Date();\n        const daysDiff = (now.getTime() - dataDate.getTime()) / (1000 * 60 * 60 * 24);\n        return daysDiff < 7;\n    }\n    /**\r\n   * Count total cards in AllPrintings data\r\n   */ countTotalCards(data) {\n        return Object.values(data.data).reduce((total, set)=>total + set.cards.length, 0);\n    }\n    /**\r\n   * Get mapping statistics\r\n   */ async getMappingStats() {\n        const cachedMappings = this.getAllCachedMappings();\n        return {\n            totalMappings: cachedMappings.length,\n            directMatches: cachedMappings.filter((m)=>m.matchMethod === 'direct').length,\n            fuzzyMatches: cachedMappings.filter((m)=>m.matchMethod === 'name_fuzzy').length,\n            unmappedCards: 0,\n            lastUpdate: cachedMappings.length > 0 ? Math.max(...cachedMappings.map((m)=>new Date(m.lastUpdated).getTime())).toString() : new Date().toISOString()\n        };\n    }\n    /**\r\n   * Clear all cached mappings\r\n   */ async clearMappingCache() {\n        this.mappingCache.clear();\n        localStorage.removeItem(this.MAPPING_CACHE_KEY);\n        console.log('Mapping cache cleared');\n    }\n    /**\r\n   * Batch process multiple cards for mapping\r\n   */ async batchGetMappings(scryfallCards) {\n        await this.initialize();\n        const results = new Map();\n        for (const card of scryfallCards){\n            try {\n                const uuid = await this.getMapping(card);\n                if (uuid) {\n                    results.set(card.id, uuid);\n                }\n            } catch (error) {\n                console.error(`Failed to map card ${card.name}:`, error);\n            }\n        }\n        return results;\n    }\n    constructor(){\n        this.allPrintingsData = null;\n        this.mappingCache = new Map();\n        this.loadingPromise = null;\n        // MTGJSON AllPrintings.json URL\n        this.MTGJSON_ALL_PRINTINGS_URL = 'https://mtgjson.com/api/v5/AllPrintings.json';\n        this.CACHE_KEY = 'mtgjson-all-printings';\n        this.MAPPING_CACHE_KEY = 'card-mappings';\n    }\n}\n// Export singleton instance\nconst cardMappingService = new CardMappingService();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./src/lib/services/cardMappingService.ts\n");

/***/ }),

/***/ "(ssr)/./src/lib/utils/mtgjsonCache.ts":
/*!***************************************!*\
  !*** ./src/lib/utils/mtgjsonCache.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   mtgjsonCache: () => (/* binding */ mtgjsonCache)\n/* harmony export */ });\n// IndexedDB configuration for MTGJSON data\nconst DB_NAME = 'MTGJSONCache';\nconst DB_VERSION = 1;\nconst STORES = {\n    PRICE_HISTORY: 'priceHistory',\n    CARD_MAPPINGS: 'cardMappings',\n    METADATA: 'metadata'\n};\n// Cache expiry times\nconst CACHE_EXPIRY = {\n    PRICE_HISTORY: 24 * 60 * 60 * 1000,\n    CARD_MAPPINGS: 7 * 24 * 60 * 60 * 1000,\n    METADATA: 60 * 60 * 1000\n};\nclass MTGJSONCache {\n    async init() {\n        if (this.db) return;\n        if (this.initPromise) return this.initPromise;\n        this.initPromise = new Promise((resolve, reject)=>{\n            if (true) {\n                reject(new Error('IndexedDB not available in server environment'));\n                return;\n            }\n            const request = indexedDB.open(DB_NAME, DB_VERSION);\n            request.onerror = ()=>{\n                reject(new Error('Failed to open IndexedDB'));\n            };\n            request.onsuccess = ()=>{\n                this.db = request.result;\n                resolve();\n            };\n            request.onupgradeneeded = (event)=>{\n                const db = event.target.result;\n                // Create price history store\n                if (!db.objectStoreNames.contains(STORES.PRICE_HISTORY)) {\n                    const priceStore = db.createObjectStore(STORES.PRICE_HISTORY, {\n                        keyPath: 'uuid'\n                    });\n                    priceStore.createIndex('cardId', 'cardId', {\n                        unique: false\n                    });\n                    priceStore.createIndex('lastUpdated', 'lastUpdated', {\n                        unique: false\n                    });\n                }\n                // Create card mappings store\n                if (!db.objectStoreNames.contains(STORES.CARD_MAPPINGS)) {\n                    const mappingStore = db.createObjectStore(STORES.CARD_MAPPINGS, {\n                        keyPath: 'scryfallId'\n                    });\n                    mappingStore.createIndex('uuid', 'uuid', {\n                        unique: false\n                    });\n                    mappingStore.createIndex('name', 'name', {\n                        unique: false\n                    });\n                }\n                // Create metadata store\n                if (!db.objectStoreNames.contains(STORES.METADATA)) {\n                    db.createObjectStore(STORES.METADATA, {\n                        keyPath: 'key'\n                    });\n                }\n            };\n        });\n        return this.initPromise;\n    }\n    async getStore(storeName, mode = 'readonly') {\n        await this.init();\n        if (!this.db) throw new Error('Database not initialized');\n        const transaction = this.db.transaction([\n            storeName\n        ], mode);\n        return transaction.objectStore(storeName);\n    }\n    // Price History Cache Methods\n    async getPriceHistory(uuid) {\n        try {\n            const store = await this.getStore(STORES.PRICE_HISTORY);\n            const request = store.get(uuid);\n            return new Promise((resolve, reject)=>{\n                request.onsuccess = ()=>{\n                    const result = request.result;\n                    if (!result) {\n                        resolve(null);\n                        return;\n                    }\n                    // Check if cache entry is expired\n                    if (Date.now() > result.expiresAt) {\n                        // Remove expired entry\n                        this.removePriceHistory(uuid);\n                        resolve(null);\n                        return;\n                    }\n                    resolve(result.data);\n                };\n                request.onerror = ()=>{\n                    reject(new Error('Failed to get price history from cache'));\n                };\n            });\n        } catch (error) {\n            console.error('Error getting price history from cache:', error);\n            return null;\n        }\n    }\n    async setPriceHistory(uuid, priceHistory) {\n        try {\n            const store = await this.getStore(STORES.PRICE_HISTORY, 'readwrite');\n            const cacheEntry = {\n                data: priceHistory,\n                timestamp: Date.now(),\n                expiresAt: Date.now() + CACHE_EXPIRY.PRICE_HISTORY\n            };\n            const request = store.put({\n                uuid,\n                ...cacheEntry\n            });\n            return new Promise((resolve, reject)=>{\n                request.onsuccess = ()=>resolve();\n                request.onerror = ()=>reject(new Error('Failed to cache price history'));\n            });\n        } catch (error) {\n            console.error('Error caching price history:', error);\n            throw error;\n        }\n    }\n    async removePriceHistory(uuid) {\n        try {\n            const store = await this.getStore(STORES.PRICE_HISTORY, 'readwrite');\n            const request = store.delete(uuid);\n            return new Promise((resolve, reject)=>{\n                request.onsuccess = ()=>resolve();\n                request.onerror = ()=>reject(new Error('Failed to remove price history'));\n            });\n        } catch (error) {\n            console.error('Error removing price history:', error);\n        }\n    }\n    // Card Mapping Cache Methods\n    async getCardMapping(scryfallId) {\n        try {\n            const store = await this.getStore(STORES.CARD_MAPPINGS);\n            const request = store.get(scryfallId);\n            return new Promise((resolve, reject)=>{\n                request.onsuccess = ()=>{\n                    const result = request.result;\n                    if (!result) {\n                        resolve(null);\n                        return;\n                    }\n                    // Check if cache entry is expired\n                    if (Date.now() > result.expiresAt) {\n                        this.removeCardMapping(scryfallId);\n                        resolve(null);\n                        return;\n                    }\n                    resolve(result.data);\n                };\n                request.onerror = ()=>{\n                    reject(new Error('Failed to get card mapping from cache'));\n                };\n            });\n        } catch (error) {\n            console.error('Error getting card mapping from cache:', error);\n            return null;\n        }\n    }\n    async setCardMapping(scryfallId, mtgjsonCard) {\n        try {\n            const store = await this.getStore(STORES.CARD_MAPPINGS, 'readwrite');\n            const cacheEntry = {\n                data: mtgjsonCard,\n                timestamp: Date.now(),\n                expiresAt: Date.now() + CACHE_EXPIRY.CARD_MAPPINGS\n            };\n            const request = store.put({\n                scryfallId,\n                ...cacheEntry\n            });\n            return new Promise((resolve, reject)=>{\n                request.onsuccess = ()=>resolve();\n                request.onerror = ()=>reject(new Error('Failed to cache card mapping'));\n            });\n        } catch (error) {\n            console.error('Error caching card mapping:', error);\n            throw error;\n        }\n    }\n    async removeCardMapping(scryfallId) {\n        try {\n            const store = await this.getStore(STORES.CARD_MAPPINGS, 'readwrite');\n            const request = store.delete(scryfallId);\n            return new Promise((resolve, reject)=>{\n                request.onsuccess = ()=>resolve();\n                request.onerror = ()=>reject(new Error('Failed to remove card mapping'));\n            });\n        } catch (error) {\n            console.error('Error removing card mapping:', error);\n        }\n    }\n    // Metadata Methods\n    async getMetadata() {\n        try {\n            const store = await this.getStore(STORES.METADATA);\n            const request = store.get('metadata');\n            return new Promise((resolve, reject)=>{\n                request.onsuccess = ()=>{\n                    const result = request.result;\n                    if (!result) {\n                        resolve(null);\n                        return;\n                    }\n                    // Check if metadata is expired\n                    if (Date.now() > result.expiresAt) {\n                        this.setMetadata({\n                            lastPriceUpdate: '',\n                            totalCards: 0,\n                            cacheVersion: '1.0'\n                        });\n                        resolve(null);\n                        return;\n                    }\n                    resolve(result.data);\n                };\n                request.onerror = ()=>{\n                    reject(new Error('Failed to get metadata from cache'));\n                };\n            });\n        } catch (error) {\n            console.error('Error getting metadata from cache:', error);\n            return null;\n        }\n    }\n    async setMetadata(metadata) {\n        try {\n            const store = await this.getStore(STORES.METADATA, 'readwrite');\n            const cacheEntry = {\n                data: metadata,\n                timestamp: Date.now(),\n                expiresAt: Date.now() + CACHE_EXPIRY.METADATA\n            };\n            const request = store.put({\n                key: 'metadata',\n                ...cacheEntry\n            });\n            return new Promise((resolve, reject)=>{\n                request.onsuccess = ()=>resolve();\n                request.onerror = ()=>reject(new Error('Failed to cache metadata'));\n            });\n        } catch (error) {\n            console.error('Error caching metadata:', error);\n            throw error;\n        }\n    }\n    // Bulk Operations\n    async batchSetPriceHistories(priceHistories) {\n        try {\n            const store = await this.getStore(STORES.PRICE_HISTORY, 'readwrite');\n            const transaction = store.transaction;\n            const promises = priceHistories.map(({ uuid, data })=>{\n                const cacheEntry = {\n                    data,\n                    timestamp: Date.now(),\n                    expiresAt: Date.now() + CACHE_EXPIRY.PRICE_HISTORY\n                };\n                const request = store.put({\n                    uuid,\n                    ...cacheEntry\n                });\n                return new Promise((resolve, reject)=>{\n                    request.onsuccess = ()=>resolve();\n                    request.onerror = ()=>reject(new Error(`Failed to cache price history for ${uuid}`));\n                });\n            });\n            await Promise.all(promises);\n            return new Promise((resolve, reject)=>{\n                transaction.oncomplete = ()=>resolve();\n                transaction.onerror = ()=>reject(new Error('Batch price history caching failed'));\n            });\n        } catch (error) {\n            console.error('Error batch caching price histories:', error);\n            throw error;\n        }\n    }\n    // Cache Management\n    async clearExpiredEntries() {\n        try {\n            const now = Date.now();\n            const stores = [\n                STORES.PRICE_HISTORY,\n                STORES.CARD_MAPPINGS,\n                STORES.METADATA\n            ];\n            for (const storeName of stores){\n                const store = await this.getStore(storeName, 'readwrite');\n                const request = store.openCursor();\n                await new Promise((resolve, reject)=>{\n                    request.onsuccess = ()=>{\n                        const cursor = request.result;\n                        if (cursor) {\n                            const entry = cursor.value;\n                            if (now > entry.expiresAt) {\n                                cursor.delete();\n                            }\n                            cursor.continue();\n                        } else {\n                            resolve();\n                        }\n                    };\n                    request.onerror = ()=>{\n                        reject(new Error(`Failed to clear expired entries from ${storeName}`));\n                    };\n                });\n            }\n        } catch (error) {\n            console.error('Error clearing expired cache entries:', error);\n        }\n    }\n    async clearAllCache() {\n        try {\n            const stores = [\n                STORES.PRICE_HISTORY,\n                STORES.CARD_MAPPINGS,\n                STORES.METADATA\n            ];\n            for (const storeName of stores){\n                const store = await this.getStore(storeName, 'readwrite');\n                const request = store.clear();\n                await new Promise((resolve, reject)=>{\n                    request.onsuccess = ()=>resolve();\n                    request.onerror = ()=>reject(new Error(`Failed to clear ${storeName}`));\n                });\n            }\n        } catch (error) {\n            console.error('Error clearing cache:', error);\n            throw error;\n        }\n    }\n    async getCacheStats() {\n        try {\n            const [priceCount, mappingCount] = await Promise.all([\n                this.getStoreCount(STORES.PRICE_HISTORY),\n                this.getStoreCount(STORES.CARD_MAPPINGS)\n            ]);\n            return {\n                priceHistoryCount: priceCount,\n                cardMappingCount: mappingCount,\n                totalSize: 0,\n                lastCleanup: null\n            };\n        } catch (error) {\n            console.error('Error getting cache stats:', error);\n            return {\n                priceHistoryCount: 0,\n                cardMappingCount: 0,\n                totalSize: 0,\n                lastCleanup: null\n            };\n        }\n    }\n    async getStoreCount(storeName) {\n        const store = await this.getStore(storeName);\n        const request = store.count();\n        return new Promise((resolve, reject)=>{\n            request.onsuccess = ()=>resolve(request.result);\n            request.onerror = ()=>reject(new Error(`Failed to get count for ${storeName}`));\n        });\n    }\n    // Cleanup\n    async close() {\n        if (this.db) {\n            this.db.close();\n            this.db = null;\n            this.initPromise = null;\n        }\n    }\n    constructor(){\n        this.db = null;\n        this.initPromise = null;\n    }\n}\n// Export singleton instance\nconst mtgjsonCache = new MTGJSONCache();\n// Initialize cache on import (client-side only)\nif (false) {}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (mtgjsonCache);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./src/lib/utils/mtgjsonCache.ts\n");

/***/ })

};
;