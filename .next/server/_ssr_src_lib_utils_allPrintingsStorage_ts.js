"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "_ssr_src_lib_utils_allPrintingsStorage_ts";
exports.ids = ["_ssr_src_lib_utils_allPrintingsStorage_ts"];
exports.modules = {

/***/ "(ssr)/./src/lib/utils/allPrintingsStorage.ts":
/*!**********************************************!*\
  !*** ./src/lib/utils/allPrintingsStorage.ts ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   allPrintingsStorage: () => (/* binding */ allPrintingsStorage)\n/* harmony export */ });\n/**\r\n * Optimized storage solution for MTGJSON AllPrintings.json data\r\n * Handles the large (~200MB) dataset efficiently using IndexedDB with compression\r\n */ class AllPrintingsStorage {\n    /**\r\n   * Store AllPrintings data in compressed chunks\r\n   */ async storeAllPrintings(allPrintingsData) {\n        console.log('Starting AllPrintings storage process...');\n        try {\n            const metadata = {\n                version: allPrintingsData.meta.version,\n                date: allPrintingsData.meta.date,\n                totalSets: 0,\n                totalCards: 0,\n                chunks: [],\n                lastUpdated: new Date().toISOString()\n            };\n            const chunks = [];\n            // Process each set\n            for (const [setCode, setData] of Object.entries(allPrintingsData.data)){\n                const cards = setData.cards || [];\n                metadata.totalSets++;\n                metadata.totalCards += cards.length;\n                // Split large sets into chunks\n                for(let i = 0; i < cards.length; i += this.CHUNK_SIZE){\n                    const chunkCards = cards.slice(i, i + this.CHUNK_SIZE);\n                    const chunkId = `${setCode}-${Math.floor(i / this.CHUNK_SIZE)}`;\n                    // Extract only necessary data for mapping\n                    const optimizedCards = chunkCards.map((card)=>({\n                            uuid: card.uuid,\n                            name: card.name,\n                            setCode: card.setCode || setCode,\n                            number: card.number,\n                            rarity: card.rarity,\n                            identifiers: card.identifiers ? {\n                                scryfallId: card.identifiers.scryfallId,\n                                multiverseId: card.identifiers.multiverseId\n                            } : undefined\n                        }));\n                    // Compress the data\n                    const compressed = await this.compressData(optimizedCards);\n                    const chunk = {\n                        id: chunkId,\n                        setCode,\n                        compressedData: compressed,\n                        uncompressedSize: JSON.stringify(optimizedCards).length,\n                        cardCount: optimizedCards.length,\n                        lastUpdated: new Date().toISOString()\n                    };\n                    chunks.push(chunk);\n                    metadata.chunks.push(chunkId);\n                }\n            }\n            // Store chunks in batches to avoid overwhelming IndexedDB\n            console.log(`Storing ${chunks.length} chunks...`);\n            await this.storeChunksInBatches(chunks);\n            // Store metadata\n            await this.storeMetadata(metadata);\n            console.log(`Successfully stored AllPrintings data: ${metadata.totalCards} cards in ${metadata.totalSets} sets`);\n        } catch (error) {\n            console.error('Failed to store AllPrintings data:', error);\n            // Clean up any partially stored data on failure\n            try {\n                await this.clearAllData();\n                console.log('Cleaned up partially stored data due to error');\n            } catch (cleanupError) {\n                console.error('Failed to cleanup after storage error:', cleanupError);\n            }\n            throw error;\n        }\n    }\n    /**\r\n   * Retrieve specific set data\r\n   */ async getSetData(setCode) {\n        try {\n            const metadata = await this.getMetadata();\n            if (!metadata) {\n                throw new Error('AllPrintings metadata not found');\n            }\n            const setChunks = metadata.chunks.filter((chunkId)=>chunkId.startsWith(setCode));\n            const cards = [];\n            for (const chunkId of setChunks){\n                const chunk = await this.getChunk(chunkId);\n                if (chunk) {\n                    const decompressed = await this.decompressData(chunk.compressedData);\n                    cards.push(...decompressed);\n                }\n            }\n            return cards;\n        } catch (error) {\n            console.error(`Failed to get set data for ${setCode}:`, error);\n            return [];\n        }\n    }\n    /**\r\n   * Search for cards across all sets\r\n   */ async searchCards(searchTerm, maxResults = 50) {\n        try {\n            const metadata = await this.getMetadata();\n            if (!metadata) return [];\n            const results = [];\n            const normalizedSearch = searchTerm.toLowerCase();\n            // Search through chunks until we have enough results\n            for (const chunkId of metadata.chunks){\n                if (results.length >= maxResults) break;\n                const chunk = await this.getChunk(chunkId);\n                if (!chunk) continue;\n                const cards = await this.decompressData(chunk.compressedData);\n                for (const card of cards){\n                    if (results.length >= maxResults) break;\n                    if (card.name.toLowerCase().includes(normalizedSearch)) {\n                        results.push(card);\n                    }\n                }\n            }\n            return results;\n        } catch (error) {\n            console.error('Failed to search cards:', error);\n            return [];\n        }\n    }\n    /**\r\n   * Find card by Scryfall ID\r\n   */ async findCardByScryfallId(scryfallId) {\n        try {\n            const metadata = await this.getMetadata();\n            if (!metadata) return null;\n            // Search through all chunks\n            for (const chunkId of metadata.chunks){\n                const chunk = await this.getChunk(chunkId);\n                if (!chunk) continue;\n                const cards = await this.decompressData(chunk.compressedData);\n                for (const card of cards){\n                    if (card.identifiers?.scryfallId === scryfallId) {\n                        return card;\n                    }\n                }\n            }\n            return null;\n        } catch (error) {\n            console.error('Failed to find card by Scryfall ID:', error);\n            return null;\n        }\n    }\n    /**\r\n   * Get storage statistics\r\n   */ async getStorageStats() {\n        try {\n            const metadata = await this.getMetadata();\n            if (!metadata) return null;\n            return {\n                totalSets: metadata.totalSets,\n                totalCards: metadata.totalCards,\n                totalChunks: metadata.chunks.length,\n                lastUpdated: metadata.lastUpdated,\n                version: metadata.version\n            };\n        } catch (error) {\n            console.error('Failed to get storage stats:', error);\n            return null;\n        }\n    }\n    /**\r\n   * Clear all stored data\r\n   */ async clearAllData() {\n        try {\n            // Clear IndexedDB data\n            const metadata = await this.getMetadata();\n            if (metadata) {\n                // Remove all chunks\n                for (const chunkId of metadata.chunks){\n                    await this.removeChunk(chunkId);\n                }\n            }\n            // Remove metadata\n            await this.removeMetadata();\n            // Also clear any old localStorage data from previous versions\n            this.clearLegacyLocalStorageData();\n            console.log('All AllPrintings data cleared');\n        } catch (error) {\n            console.error('Failed to clear AllPrintings data:', error);\n            throw error;\n        }\n    }\n    /**\r\n   * Clear legacy localStorage data from previous versions\r\n   */ clearLegacyLocalStorageData() {\n        try {\n            // Clear old metadata\n            localStorage.removeItem('allprintings-metadata');\n            // Clear old chunks (scan for chunk- prefixed keys)\n            const keysToRemove = [];\n            for(let i = 0; i < localStorage.length; i++){\n                const key = localStorage.key(i);\n                if (key && key.startsWith('chunk-')) {\n                    keysToRemove.push(key);\n                }\n            }\n            keysToRemove.forEach((key)=>{\n                localStorage.removeItem(key);\n            });\n            if (keysToRemove.length > 0) {\n                console.log(`Cleared ${keysToRemove.length} legacy localStorage chunks`);\n            }\n        } catch (error) {\n            console.error('Failed to clear legacy localStorage data:', error);\n        }\n    }\n    /**\r\n   * Check if data exists and is fresh\r\n   */ async isDataAvailable() {\n        try {\n            const metadata = await this.getMetadata();\n            if (!metadata) return false;\n            // Check if data is less than 7 days old\n            const dataAge = Date.now() - new Date(metadata.lastUpdated).getTime();\n            const maxAge = 7 * 24 * 60 * 60 * 1000; // 7 days\n            return dataAge < maxAge;\n        } catch (error) {\n            console.error('Failed to check data availability:', error);\n            return false;\n        }\n    }\n    // Private helper methods\n    async compressData(data) {\n        try {\n            // Simple compression using JSON stringify with reduced precision\n            const jsonString = JSON.stringify(data);\n            // Basic compression by removing unnecessary whitespace and using shorter keys\n            const compressed = jsonString.replace(/\\s+/g, '').replace(/\"uuid\":/g, '\"u\":').replace(/\"name\":/g, '\"n\":').replace(/\"setCode\":/g, '\"s\":').replace(/\"number\":/g, '\"#\":').replace(/\"rarity\":/g, '\"r\":').replace(/\"identifiers\":/g, '\"i\":').replace(/\"scryfallId\":/g, '\"si\":').replace(/\"multiverseId\":/g, '\"mi\":');\n            // Try different encoding approaches\n            try {\n                // Method 1: Use TextEncoder for proper Unicode handling\n                const encoder = new TextEncoder();\n                const uint8Array = encoder.encode(compressed);\n                // Convert to base64 using proper binary handling\n                let binaryString = '';\n                for(let i = 0; i < uint8Array.length; i++){\n                    binaryString += String.fromCharCode(uint8Array[i]);\n                }\n                return btoa(binaryString);\n            } catch (encodingError) {\n                console.warn('TextEncoder method failed, trying fallback:', encodingError);\n                // Method 2: Fallback - escape Unicode characters first\n                const escapedCompressed = compressed.replace(/[\\u0080-\\uFFFF]/g, (match)=>{\n                    return '\\\\u' + ('0000' + match.charCodeAt(0).toString(16)).substr(-4);\n                });\n                return btoa(escapedCompressed);\n            }\n        } catch (error) {\n            console.error('Failed to compress data with all methods:', error);\n            // Method 3: Last resort - store uncompressed but with key shortening\n            const jsonString = JSON.stringify(data);\n            const shortened = jsonString.replace(/\"uuid\":/g, '\"u\":').replace(/\"name\":/g, '\"n\":').replace(/\"setCode\":/g, '\"s\":').replace(/\"number\":/g, '\"#\":').replace(/\"rarity\":/g, '\"r\":');\n            // Mark as uncompressed with a prefix\n            return 'UNCOMPRESSED:' + shortened;\n        }\n    }\n    async decompressData(compressedData) {\n        try {\n            let decoded;\n            // Check if data is uncompressed (fallback method)\n            if (compressedData.startsWith('UNCOMPRESSED:')) {\n                decoded = compressedData.substring('UNCOMPRESSED:'.length);\n            } else {\n                // Try different decoding approaches\n                try {\n                    // Method 1: Use TextDecoder for proper Unicode handling\n                    const binaryString = atob(compressedData);\n                    // Convert binary string back to Uint8Array\n                    const uint8Array = new Uint8Array(binaryString.length);\n                    for(let i = 0; i < binaryString.length; i++){\n                        uint8Array[i] = binaryString.charCodeAt(i);\n                    }\n                    // Use TextDecoder to handle Unicode characters properly\n                    const decoder = new TextDecoder();\n                    decoded = decoder.decode(uint8Array);\n                } catch (decodingError) {\n                    console.warn('TextDecoder method failed, trying fallback:', decodingError);\n                    // Method 2: Fallback - simple atob and unescape Unicode\n                    decoded = atob(compressedData);\n                    // Unescape Unicode characters\n                    decoded = decoded.replace(/\\\\u([0-9a-fA-F]{4})/g, (match, hex)=>{\n                        return String.fromCharCode(parseInt(hex, 16));\n                    });\n                }\n            }\n            // Expand the shortened keys back to original\n            const expanded = decoded.replace(/\"u\":/g, '\"uuid\":').replace(/\"n\":/g, '\"name\":').replace(/\"s\":/g, '\"setCode\":').replace(/\"#\":/g, '\"number\":').replace(/\"r\":/g, '\"rarity\":').replace(/\"i\":/g, '\"identifiers\":').replace(/\"si\":/g, '\"scryfallId\":').replace(/\"mi\":/g, '\"multiverseId\":');\n            return JSON.parse(expanded);\n        } catch (error) {\n            console.error('Failed to decompress data with all methods:', error);\n            throw error;\n        }\n    }\n    async storeChunksInBatches(chunks) {\n        const batchSize = 10;\n        for(let i = 0; i < chunks.length; i += batchSize){\n            const batch = chunks.slice(i, i + batchSize);\n            const batchPromises = batch.map((chunk)=>this.storeChunk(chunk));\n            await Promise.all(batchPromises);\n            // Small delay to avoid overwhelming IndexedDB\n            await new Promise((resolve)=>setTimeout(resolve, 10));\n            // Progress logging\n            if (i % 100 === 0) {\n                console.log(`Stored ${Math.min(i + batchSize, chunks.length)} / ${chunks.length} chunks`);\n            }\n        }\n    }\n    async storeChunk(chunk) {\n        return new Promise(async (resolve, reject)=>{\n            try {\n                const db = await this.openIndexedDB();\n                const transaction = db.transaction([\n                    'chunks'\n                ], 'readwrite');\n                const store = transaction.objectStore('chunks');\n                const request = store.put(chunk, chunk.id);\n                request.onsuccess = ()=>resolve();\n                request.onerror = ()=>reject(request.error);\n            } catch (error) {\n                console.error(`Failed to store chunk ${chunk.id}:`, error);\n                reject(error);\n            }\n        });\n    }\n    async getChunk(chunkId) {\n        return new Promise(async (resolve, reject)=>{\n            try {\n                const db = await this.openIndexedDB();\n                const transaction = db.transaction([\n                    'chunks'\n                ], 'readonly');\n                const store = transaction.objectStore('chunks');\n                const request = store.get(chunkId);\n                request.onsuccess = ()=>resolve(request.result || null);\n                request.onerror = ()=>reject(request.error);\n            } catch (error) {\n                console.error(`Failed to get chunk ${chunkId}:`, error);\n                resolve(null);\n            }\n        });\n    }\n    async removeChunk(chunkId) {\n        return new Promise(async (resolve, reject)=>{\n            try {\n                const db = await this.openIndexedDB();\n                const transaction = db.transaction([\n                    'chunks'\n                ], 'readwrite');\n                const store = transaction.objectStore('chunks');\n                const request = store.delete(chunkId);\n                request.onsuccess = ()=>resolve();\n                request.onerror = ()=>reject(request.error);\n            } catch (error) {\n                console.error(`Failed to remove chunk ${chunkId}:`, error);\n                resolve(); // Don't fail the entire operation for cleanup errors\n            }\n        });\n    }\n    async storeMetadata(metadata) {\n        return new Promise(async (resolve, reject)=>{\n            try {\n                const db = await this.openIndexedDB();\n                const transaction = db.transaction([\n                    'metadata'\n                ], 'readwrite');\n                const store = transaction.objectStore('metadata');\n                const request = store.put(metadata, 'allprintings-metadata');\n                request.onsuccess = ()=>resolve();\n                request.onerror = ()=>reject(request.error);\n            } catch (error) {\n                console.error('Failed to store metadata:', error);\n                reject(error);\n            }\n        });\n    }\n    async getMetadata() {\n        return new Promise(async (resolve, reject)=>{\n            try {\n                const db = await this.openIndexedDB();\n                const transaction = db.transaction([\n                    'metadata'\n                ], 'readonly');\n                const store = transaction.objectStore('metadata');\n                const request = store.get('allprintings-metadata');\n                request.onsuccess = ()=>resolve(request.result || null);\n                request.onerror = ()=>reject(request.error);\n            } catch (error) {\n                console.error('Failed to get metadata:', error);\n                resolve(null);\n            }\n        });\n    }\n    async removeMetadata() {\n        return new Promise(async (resolve, reject)=>{\n            try {\n                const db = await this.openIndexedDB();\n                const transaction = db.transaction([\n                    'metadata'\n                ], 'readwrite');\n                const store = transaction.objectStore('metadata');\n                const request = store.delete('allprintings-metadata');\n                request.onsuccess = ()=>resolve();\n                request.onerror = ()=>reject(request.error);\n            } catch (error) {\n                console.error('Failed to remove metadata:', error);\n                resolve(); // Don't fail for cleanup errors\n            }\n        });\n    }\n    async openIndexedDB() {\n        if (this.dbPromise) {\n            return this.dbPromise;\n        }\n        this.dbPromise = new Promise((resolve, reject)=>{\n            const request = indexedDB.open('MTGJSONStorage', 1);\n            request.onerror = ()=>{\n                reject(new Error('Failed to open IndexedDB'));\n            };\n            request.onsuccess = ()=>{\n                resolve(request.result);\n            };\n            request.onupgradeneeded = (event)=>{\n                const db = event.target.result;\n                // Create object stores\n                if (!db.objectStoreNames.contains('chunks')) {\n                    db.createObjectStore('chunks');\n                }\n                if (!db.objectStoreNames.contains('metadata')) {\n                    db.createObjectStore('metadata');\n                }\n            };\n        });\n        return this.dbPromise;\n    }\n    constructor(){\n        this.CHUNK_SIZE = 50; // Cards per chunk\n        this.METADATA_KEY = 'allprintings-metadata';\n        this.CHUNK_PREFIX = 'chunk-';\n        // IndexedDB helper methods\n        this.dbPromise = null;\n    }\n}\n// Export singleton instance\nconst allPrintingsStorage = new AllPrintingsStorage();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./src/lib/utils/allPrintingsStorage.ts\n");

/***/ })

};
;