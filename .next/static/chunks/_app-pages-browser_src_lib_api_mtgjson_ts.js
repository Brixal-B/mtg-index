"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["_app-pages-browser_src_lib_api_mtgjson_ts"],{

/***/ "(app-pages-browser)/./src/lib/api/mtgjson.ts":
/*!********************************!*\
  !*** ./src/lib/api/mtgjson.ts ***!
  \********************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MTGJSON_CONFIG: () => (/* binding */ MTGJSON_CONFIG),\n/* harmony export */   batchGetPriceHistories: () => (/* binding */ batchGetPriceHistories),\n/* harmony export */   clearMTGJSONCache: () => (/* binding */ clearMTGJSONCache),\n/* harmony export */   convertMTGJSONPrices: () => (/* binding */ convertMTGJSONPrices),\n/* harmony export */   fetchPriceHistoryByUUID: () => (/* binding */ fetchPriceHistoryByUUID),\n/* harmony export */   getCardMapping: () => (/* binding */ getCardMapping),\n/* harmony export */   getMTGJSONCacheStats: () => (/* binding */ getMTGJSONCacheStats),\n/* harmony export */   getPriceHistoryForCard: () => (/* binding */ getPriceHistoryForCard)\n/* harmony export */ });\n/* harmony import */ var _lib_services_cardMappingService__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/lib/services/cardMappingService */ \"(app-pages-browser)/./src/lib/services/cardMappingService.ts\");\n// MTGJSON Configuration\nconst MTGJSON_CONFIG = {\n    baseUrl: 'https://mtgjson.com/api/v5',\n    cacheExpiry: 24 * 60 * 60 * 1000,\n    preferredProvider: 'tcgplayer',\n    enableCaching: true\n};\n// Cache management\nconst CACHE_KEYS = {\n    ALL_PRICES: 'mtgjson-all-prices',\n    CARD_MAPPINGS: 'mtgjson-card-mappings',\n    PRICE_HISTORY: 'mtgjson-price-history-'\n};\n// Rate limiting: MTGJSON doesn't specify limits, but we'll be conservative\nconst RATE_LIMIT_DELAY = 200; // 200ms between requests\nlet lastRequestTime = 0;\nasync function rateLimitedFetch(url) {\n    const now = Date.now();\n    const timeSinceLastRequest = now - lastRequestTime;\n    if (timeSinceLastRequest < RATE_LIMIT_DELAY) {\n        await new Promise((resolve)=>setTimeout(resolve, RATE_LIMIT_DELAY - timeSinceLastRequest));\n    }\n    lastRequestTime = Date.now();\n    try {\n        console.log(\"Fetching MTGJSON data: \".concat(url));\n        const response = await fetch(url);\n        if (!response.ok) {\n            throw new Error(\"MTGJSON API Error: \".concat(response.status, \" \").concat(response.statusText));\n        }\n        return response;\n    } catch (error) {\n        console.error('MTGJSON API request failed:', {\n            url,\n            error: error instanceof Error ? error.message : 'Unknown error',\n            timestamp: new Date().toISOString()\n        });\n        if (error instanceof Error) {\n            if (error.message.includes('Failed to fetch')) {\n                throw new Error('Network error: Unable to connect to MTGJSON API. Please check your internet connection.');\n            }\n        }\n        throw error;\n    }\n}\n// Cache utilities\nfunction getCachedData(key) {\n    if (!MTGJSON_CONFIG.enableCaching || \"object\" === 'undefined') {\n        return null;\n    }\n    try {\n        const cached = localStorage.getItem(key);\n        if (!cached) return null;\n        const parsed = JSON.parse(cached);\n        const now = Date.now();\n        if (parsed.expiresAt && now > parsed.expiresAt) {\n            localStorage.removeItem(key);\n            return null;\n        }\n        return parsed.data;\n    } catch (error) {\n        console.error(\"Error reading cache for key \".concat(key, \":\"), error);\n        return null;\n    }\n}\nfunction setCachedData(key, data, customExpiry) {\n    if (!MTGJSON_CONFIG.enableCaching || \"object\" === 'undefined') {\n        return;\n    }\n    try {\n        const expiry = customExpiry || MTGJSON_CONFIG.cacheExpiry;\n        const cacheEntry = {\n            data,\n            expiresAt: Date.now() + expiry,\n            cachedAt: Date.now()\n        };\n        localStorage.setItem(key, JSON.stringify(cacheEntry));\n    } catch (error) {\n        console.error(\"Error setting cache for key \".concat(key, \":\"), error);\n    }\n}\n// Import the card mapping service\n\n// Map Scryfall card to MTGJSON UUID\nasync function getCardMapping(scryfallCard) {\n    try {\n        // Use the card mapping service\n        const uuid = await _lib_services_cardMappingService__WEBPACK_IMPORTED_MODULE_0__.cardMappingService.getMapping(scryfallCard);\n        if (uuid) {\n            // Cache the successful mapping\n            const cacheKey = \"\".concat(CACHE_KEYS.CARD_MAPPINGS).concat(scryfallCard.id);\n            setCachedData(cacheKey, uuid);\n        }\n        return uuid;\n    } catch (error) {\n        console.error(\"Error getting card mapping for \".concat(scryfallCard.name, \":\"), error);\n        return null;\n    }\n}\n// Fetch price history for a specific UUID\nasync function fetchPriceHistoryByUUID(uuid) {\n    try {\n        // Check cache first\n        const cacheKey = \"\".concat(CACHE_KEYS.PRICE_HISTORY).concat(uuid);\n        const cached = getCachedData(cacheKey);\n        if (cached) return cached;\n        // Try to get from AllPrices data\n        const priceData = await getAllPricesData();\n        if (priceData && priceData[uuid]) {\n            const cardPrices = priceData[uuid];\n            // Cache the result\n            setCachedData(cacheKey, cardPrices);\n            return cardPrices;\n        }\n        console.log(\"No price history found for UUID \".concat(uuid));\n        return null;\n    } catch (error) {\n        console.error('Error fetching price history:', error);\n        return null;\n    }\n}\n// Fetch and cache AllPrices.json data\nlet allPricesCache = null;\nlet allPricesLoadingPromise = null;\nasync function getAllPricesData() {\n    // Return cached data if available\n    if (allPricesCache) {\n        return allPricesCache;\n    }\n    // Return existing loading promise if in progress\n    if (allPricesLoadingPromise) {\n        return allPricesLoadingPromise;\n    }\n    // Start loading AllPrices data\n    allPricesLoadingPromise = loadAllPricesData();\n    return allPricesLoadingPromise;\n}\nasync function loadAllPricesData() {\n    try {\n        var _allPricesResponse_meta;\n        console.log('Loading MTGJSON AllPrices data...');\n        // Check if we have cached AllPrices data\n        const cachedAllPrices = getCachedData('mtgjson-all-prices-data');\n        // Use cached data if it's less than 24 hours old\n        if (cachedAllPrices && Date.now() - cachedAllPrices.timestamp < 24 * 60 * 60 * 1000) {\n            console.log('Using cached AllPrices data');\n            allPricesCache = cachedAllPrices.data;\n            return allPricesCache;\n        }\n        // Fetch fresh AllPrices data\n        console.log('Fetching fresh AllPrices data from MTGJSON...');\n        const response = await rateLimitedFetch('https://mtgjson.com/api/v5/AllPrices.json');\n        if (!response.ok) {\n            throw new Error(\"Failed to fetch AllPrices: \".concat(response.status, \" \").concat(response.statusText));\n        }\n        // Parse the JSON response\n        const allPricesResponse = await response.json();\n        if (!allPricesResponse.data) {\n            throw new Error('Invalid AllPrices response format');\n        }\n        // Cache the data\n        const cacheData = {\n            data: allPricesResponse.data,\n            timestamp: Date.now(),\n            version: ((_allPricesResponse_meta = allPricesResponse.meta) === null || _allPricesResponse_meta === void 0 ? void 0 : _allPricesResponse_meta.version) || 'unknown'\n        };\n        setCachedData('mtgjson-all-prices-data', cacheData);\n        allPricesCache = allPricesResponse.data;\n        console.log(\"Loaded AllPrices data for \".concat(Object.keys(allPricesCache || {}).length, \" cards\"));\n        return allPricesCache;\n    } catch (error) {\n        console.error('Failed to load AllPrices data:', error);\n        // Try to use stale cached data as fallback\n        const staleCache = getCachedData('mtgjson-all-prices-data');\n        if (staleCache) {\n            console.warn('Using stale AllPrices cache due to fetch failure');\n            allPricesCache = staleCache.data;\n            return allPricesCache;\n        }\n        return null;\n    } finally{\n        allPricesLoadingPromise = null;\n    }\n}\n// Convert MTGJSON price data to our internal format\nfunction convertMTGJSONPrices(uuid, mtgjsonPrices, cardName) {\n    const processedPrices = [];\n    try {\n        var _mtgjsonPrices_paper;\n        // Get the preferred provider's data\n        const provider = MTGJSON_CONFIG.preferredProvider;\n        const paperPrices = (_mtgjsonPrices_paper = mtgjsonPrices.paper) === null || _mtgjsonPrices_paper === void 0 ? void 0 : _mtgjsonPrices_paper[provider];\n        if (paperPrices === null || paperPrices === void 0 ? void 0 : paperPrices.normal) {\n            paperPrices.normal.forEach((pricePoint)=>{\n                processedPrices.push({\n                    cardId: uuid,\n                    date: pricePoint.date,\n                    price: pricePoint.price,\n                    priceType: 'usd'\n                });\n            });\n        }\n        if (paperPrices === null || paperPrices === void 0 ? void 0 : paperPrices.foil) {\n            paperPrices.foil.forEach((pricePoint)=>{\n                processedPrices.push({\n                    cardId: uuid,\n                    date: pricePoint.date,\n                    price: pricePoint.price,\n                    priceType: 'usdFoil'\n                });\n            });\n        }\n    } catch (error) {\n        console.error(\"Error converting MTGJSON prices for \".concat(cardName, \":\"), error);\n    }\n    return processedPrices.sort((a, b)=>new Date(a.date).getTime() - new Date(b.date).getTime());\n}\n// Get price history for a Scryfall card\nasync function getPriceHistoryForCard(scryfallCard) {\n    try {\n        // First, get the MTGJSON UUID mapping\n        const uuid = await getCardMapping(scryfallCard);\n        if (!uuid) {\n            console.log(\"No MTGJSON mapping found for \".concat(scryfallCard.name));\n            return null;\n        }\n        // Fetch the price history\n        const mtgjsonPrices = await fetchPriceHistoryByUUID(uuid);\n        if (!mtgjsonPrices) {\n            return null;\n        }\n        // Convert to our internal format\n        const processedPrices = convertMTGJSONPrices(uuid, mtgjsonPrices, scryfallCard.name);\n        if (processedPrices.length === 0) {\n            return null;\n        }\n        // Calculate trend and volatility\n        const prices = processedPrices.map((p)=>p.price);\n        const averagePrice = prices.reduce((sum, price)=>sum + price, 0) / prices.length;\n        // Simple trend calculation (last 7 days vs previous 7 days)\n        const recent = prices.slice(-7);\n        const previous = prices.slice(-14, -7);\n        const recentAvg = recent.reduce((sum, p)=>sum + p, 0) / recent.length;\n        const previousAvg = previous.reduce((sum, p)=>sum + p, 0) / previous.length;\n        const trend = recentAvg > previousAvg * 1.05 ? 'up' : recentAvg < previousAvg * 0.95 ? 'down' : 'stable';\n        // Calculate volatility (standard deviation)\n        const variance = prices.reduce((sum, price)=>sum + Math.pow(price - averagePrice, 2), 0) / prices.length;\n        const volatility = Math.sqrt(variance);\n        // Calculate percentage changes\n        const percentChange24h = prices.length >= 2 ? (prices[prices.length - 1] - prices[prices.length - 2]) / prices[prices.length - 2] * 100 : undefined;\n        const percentChange7d = recent.length > 0 && previous.length > 0 ? (recentAvg - previousAvg) / previousAvg * 100 : undefined;\n        return {\n            cardId: scryfallCard.id,\n            uuid,\n            prices: processedPrices,\n            trend,\n            volatility,\n            averagePrice,\n            percentChange24h,\n            percentChange7d,\n            lastUpdated: new Date().toISOString(),\n            provider: 'mtgjson'\n        };\n    } catch (error) {\n        console.error(\"Error getting price history for \".concat(scryfallCard.name, \":\"), error);\n        return null;\n    }\n}\n// Batch fetch price histories for multiple cards\nasync function batchGetPriceHistories(cards) {\n    const results = new Map();\n    // Process cards in batches to avoid overwhelming the system\n    const batchSize = 10;\n    for(let i = 0; i < cards.length; i += batchSize){\n        const batch = cards.slice(i, i + batchSize);\n        const batchPromises = batch.map(async (card)=>{\n            const history = await getPriceHistoryForCard(card);\n            if (history) {\n                results.set(card.id, history);\n            }\n        });\n        await Promise.all(batchPromises);\n        // Add a small delay between batches\n        if (i + batchSize < cards.length) {\n            await new Promise((resolve)=>setTimeout(resolve, 1000));\n        }\n    }\n    return results;\n}\n// Utility function to clear MTGJSON cache\nfunction clearMTGJSONCache() {\n    if (false) {}\n    try {\n        const keys = Object.keys(localStorage);\n        keys.forEach((key)=>{\n            if (key.startsWith('mtgjson-')) {\n                localStorage.removeItem(key);\n            }\n        });\n        console.log('MTGJSON cache cleared');\n    } catch (error) {\n        console.error('Error clearing MTGJSON cache:', error);\n    }\n}\n// Get cache statistics\nfunction getMTGJSONCacheStats() {\n    if (false) {}\n    try {\n        const keys = Object.keys(localStorage);\n        const mtgjsonKeys = keys.filter((key)=>key.startsWith('mtgjson-'));\n        let totalSize = 0;\n        const cacheEntries = mtgjsonKeys.map((key)=>{\n            const data = localStorage.getItem(key);\n            const size = data ? data.length : 0;\n            totalSize += size;\n            return {\n                key,\n                size,\n                sizeFormatted: \"\".concat((size / 1024).toFixed(2), \" KB\")\n            };\n        });\n        return {\n            totalEntries: mtgjsonKeys.length,\n            totalSize,\n            totalSizeFormatted: \"\".concat((totalSize / 1024 / 1024).toFixed(2), \" MB\"),\n            entries: cacheEntries\n        };\n    } catch (error) {\n        console.error('Error getting cache stats:', error);\n        return null;\n    }\n}\n// Export configuration for external use\n\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/api/mtgjson.ts\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/lib/services/cardMappingService.ts":
/*!************************************************!*\
  !*** ./src/lib/services/cardMappingService.ts ***!
  \************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   cardMappingService: () => (/* binding */ cardMappingService)\n/* harmony export */ });\n/* harmony import */ var _lib_utils_mtgjsonCache__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/lib/utils/mtgjsonCache */ \"(app-pages-browser)/./src/lib/utils/mtgjsonCache.ts\");\n\nclass CardMappingService {\n    /**\r\n   * Initialize the mapping service by loading AllPrintings data\r\n   */ async initialize() {\n        if (this.loadingPromise) {\n            return this.loadingPromise;\n        }\n        this.loadingPromise = this.loadAllPrintingsData();\n        return this.loadingPromise;\n    }\n    /**\r\n   * Load and cache AllPrintings.json data\r\n   */ async loadAllPrintingsData() {\n        try {\n            console.log('Loading MTGJSON AllPrintings data...');\n            // Try to load from cache first\n            const cached = await this.getCachedAllPrintings();\n            if (cached && this.isDataFresh(cached.meta.date)) {\n                this.allPrintingsData = cached;\n                console.log('Loaded AllPrintings from cache');\n                await this.loadMappingCache();\n                return;\n            }\n            // Fetch fresh data from MTGJSON\n            console.log('Fetching fresh AllPrintings data from MTGJSON...');\n            const response = await fetch(this.MTGJSON_ALL_PRINTINGS_URL);\n            if (!response.ok) {\n                throw new Error(\"Failed to fetch AllPrintings: \".concat(response.status, \" \").concat(response.statusText));\n            }\n            // Parse the response\n            const data = await response.json();\n            if (!data.data || !data.meta) {\n                throw new Error('Invalid AllPrintings response format');\n            }\n            this.allPrintingsData = data;\n            // Store using the optimized storage system\n            const { allPrintingsStorage } = await __webpack_require__.e(/*! import() */ \"_app-pages-browser_src_lib_utils_allPrintingsStorage_ts\").then(__webpack_require__.bind(__webpack_require__, /*! @/lib/utils/allPrintingsStorage */ \"(app-pages-browser)/./src/lib/utils/allPrintingsStorage.ts\"));\n            await allPrintingsStorage.storeAllPrintings(data);\n            await this.loadMappingCache();\n            console.log(\"Loaded \".concat(Object.keys(data.data).length, \" sets from MTGJSON\"));\n        } catch (error) {\n            console.error('Failed to load AllPrintings data:', error);\n            // Try to use optimized storage as fallback\n            try {\n                const { allPrintingsStorage } = await __webpack_require__.e(/*! import() */ \"_app-pages-browser_src_lib_utils_allPrintingsStorage_ts\").then(__webpack_require__.bind(__webpack_require__, /*! @/lib/utils/allPrintingsStorage */ \"(app-pages-browser)/./src/lib/utils/allPrintingsStorage.ts\"));\n                const isAvailable = await allPrintingsStorage.isDataAvailable();\n                if (isAvailable) {\n                    console.log('Using stored AllPrintings data as fallback');\n                    // We'll work with the stored data without loading everything into memory\n                    await this.loadMappingCache();\n                    return;\n                }\n            } catch (storageError) {\n                console.error('Failed to access stored AllPrintings data:', storageError);\n            }\n            throw new Error('Failed to load AllPrintings data and no cache available');\n        }\n    }\n    /**\r\n   * Get the MTGJSON UUID for a Scryfall card\r\n   */ async getMapping(scryfallCard) {\n        await this.initialize();\n        // Check cache first\n        const cached = this.mappingCache.get(scryfallCard.id);\n        if (cached) {\n            return cached.mtgjsonUuid;\n        }\n        // Try to find mapping\n        const mapping = await this.findCardMapping(scryfallCard);\n        if (mapping) {\n            // Cache the mapping\n            this.mappingCache.set(scryfallCard.id, mapping);\n            await this.saveMappingToCache(mapping);\n            return mapping.mtgjsonUuid;\n        }\n        return null;\n    }\n    /**\r\n   * Find mapping for a Scryfall card using multiple strategies\r\n   */ async findCardMapping(scryfallCard) {\n        // First try with in-memory AllPrintings data if available\n        if (this.allPrintingsData) {\n            const strategies = [\n                ()=>this.findByDirectScryfallId(scryfallCard),\n                ()=>this.findByNameAndSet(scryfallCard),\n                ()=>this.findByCollectorNumber(scryfallCard),\n                ()=>this.findByFuzzyName(scryfallCard)\n            ];\n            for (const strategy of strategies){\n                const result = strategy();\n                if (result) {\n                    return result;\n                }\n            }\n        }\n        // Fallback to optimized storage search\n        try {\n            const { allPrintingsStorage } = await __webpack_require__.e(/*! import() */ \"_app-pages-browser_src_lib_utils_allPrintingsStorage_ts\").then(__webpack_require__.bind(__webpack_require__, /*! @/lib/utils/allPrintingsStorage */ \"(app-pages-browser)/./src/lib/utils/allPrintingsStorage.ts\"));\n            // Strategy 1: Direct Scryfall ID search\n            if (scryfallCard.scryfallId) {\n                const card = await allPrintingsStorage.findCardByScryfallId(scryfallCard.scryfallId);\n                if (card) {\n                    return {\n                        scryfallId: scryfallCard.id,\n                        mtgjsonUuid: card.uuid,\n                        confidence: 1.0,\n                        matchMethod: 'direct',\n                        lastUpdated: new Date().toISOString()\n                    };\n                }\n            }\n            // Strategy 2: Search by name and try to match with set\n            const searchResults = await allPrintingsStorage.searchCards(scryfallCard.name, 20);\n            for (const card of searchResults){\n                // Exact name and set match\n                if (this.normalizeCardName(card.name) === this.normalizeCardName(scryfallCard.name) && card.setCode.toLowerCase() === scryfallCard.setCode.toLowerCase()) {\n                    return {\n                        scryfallId: scryfallCard.id,\n                        mtgjsonUuid: card.uuid,\n                        confidence: 0.95,\n                        matchMethod: 'name_set',\n                        lastUpdated: new Date().toISOString()\n                    };\n                }\n                // Collector number match within same set\n                if (card.setCode.toLowerCase() === scryfallCard.setCode.toLowerCase() && card.number.toLowerCase() === (scryfallCard.number || '').toLowerCase()) {\n                    const nameSimilarity = this.calculateNameSimilarity(scryfallCard.name, card.name);\n                    if (nameSimilarity > 0.8) {\n                        return {\n                            scryfallId: scryfallCard.id,\n                            mtgjsonUuid: card.uuid,\n                            confidence: 0.9,\n                            matchMethod: 'collector_number',\n                            lastUpdated: new Date().toISOString()\n                        };\n                    }\n                }\n                // Fuzzy name match\n                const similarity = this.calculateNameSimilarity(scryfallCard.name, card.name);\n                if (similarity > 0.9) {\n                    return {\n                        scryfallId: scryfallCard.id,\n                        mtgjsonUuid: card.uuid,\n                        confidence: similarity * 0.8,\n                        matchMethod: 'name_fuzzy',\n                        lastUpdated: new Date().toISOString()\n                    };\n                }\n            }\n        } catch (error) {\n            console.error('Error searching optimized storage:', error);\n        }\n        console.warn(\"No mapping found for card: \".concat(scryfallCard.name, \" (\").concat(scryfallCard.setCode, \")\"));\n        return null;\n    }\n    /**\r\n   * Strategy 1: Direct Scryfall ID match (most reliable)\r\n   */ findByDirectScryfallId(scryfallCard) {\n        if (!scryfallCard.scryfallId) return null;\n        for (const set of Object.values(this.allPrintingsData.data)){\n            for (const card of set.cards){\n                var _card_identifiers;\n                if (((_card_identifiers = card.identifiers) === null || _card_identifiers === void 0 ? void 0 : _card_identifiers.scryfallId) === scryfallCard.scryfallId) {\n                    return {\n                        scryfallId: scryfallCard.id,\n                        mtgjsonUuid: card.uuid,\n                        confidence: 1.0,\n                        matchMethod: 'direct',\n                        lastUpdated: new Date().toISOString()\n                    };\n                }\n            }\n        }\n        return null;\n    }\n    /**\r\n   * Strategy 2: Match by exact name and set code\r\n   */ findByNameAndSet(scryfallCard) {\n        const normalizedName = this.normalizeCardName(scryfallCard.name);\n        const setCode = scryfallCard.setCode.toLowerCase();\n        for (const set of Object.values(this.allPrintingsData.data)){\n            if (set.code.toLowerCase() !== setCode) continue;\n            for (const card of set.cards){\n                const cardNormalizedName = this.normalizeCardName(card.name);\n                if (cardNormalizedName === normalizedName) {\n                    return {\n                        scryfallId: scryfallCard.id,\n                        mtgjsonUuid: card.uuid,\n                        confidence: 0.95,\n                        matchMethod: 'name_set',\n                        lastUpdated: new Date().toISOString()\n                    };\n                }\n            }\n        }\n        return null;\n    }\n    /**\r\n   * Strategy 3: Match by collector number and set\r\n   */ findByCollectorNumber(scryfallCard) {\n        if (!scryfallCard.number) return null;\n        const setCode = scryfallCard.setCode.toLowerCase();\n        const collectorNumber = scryfallCard.number.toLowerCase();\n        for (const set of Object.values(this.allPrintingsData.data)){\n            if (set.code.toLowerCase() !== setCode) continue;\n            for (const card of set.cards){\n                if (card.number.toLowerCase() === collectorNumber) {\n                    // Also check if names are similar to avoid false positives\n                    const nameSimilarity = this.calculateNameSimilarity(scryfallCard.name, card.name);\n                    if (nameSimilarity > 0.8) {\n                        return {\n                            scryfallId: scryfallCard.id,\n                            mtgjsonUuid: card.uuid,\n                            confidence: 0.9,\n                            matchMethod: 'collector_number',\n                            lastUpdated: new Date().toISOString()\n                        };\n                    }\n                }\n            }\n        }\n        return null;\n    }\n    /**\r\n   * Strategy 4: Fuzzy name matching (least reliable)\r\n   */ findByFuzzyName(scryfallCard) {\n        const normalizedName = this.normalizeCardName(scryfallCard.name);\n        let bestMatch = null;\n        for (const set of Object.values(this.allPrintingsData.data)){\n            for (const card of set.cards){\n                const cardNormalizedName = this.normalizeCardName(card.name);\n                const similarity = this.calculateNameSimilarity(normalizedName, cardNormalizedName);\n                if (similarity > 0.9 && (!bestMatch || similarity > bestMatch.similarity)) {\n                    bestMatch = {\n                        card,\n                        similarity\n                    };\n                }\n            }\n        }\n        if (bestMatch && bestMatch.similarity > 0.9) {\n            return {\n                scryfallId: scryfallCard.id,\n                mtgjsonUuid: bestMatch.card.uuid,\n                confidence: bestMatch.similarity * 0.8,\n                matchMethod: 'name_fuzzy',\n                lastUpdated: new Date().toISOString()\n            };\n        }\n        return null;\n    }\n    /**\r\n   * Normalize card names for comparison\r\n   */ normalizeCardName(name) {\n        return name.toLowerCase().replace(/[^\\w\\s]/g, '') // Remove special characters\n        .replace(/\\s+/g, ' ') // Normalize whitespace\n        .trim();\n    }\n    /**\r\n   * Calculate similarity between two strings using Levenshtein distance\r\n   */ calculateNameSimilarity(str1, str2) {\n        const len1 = str1.length;\n        const len2 = str2.length;\n        if (len1 === 0) return len2 === 0 ? 1 : 0;\n        if (len2 === 0) return 0;\n        const matrix = [];\n        // Initialize matrix\n        for(let i = 0; i <= len1; i++){\n            matrix[i] = [\n                i\n            ];\n        }\n        for(let j = 0; j <= len2; j++){\n            matrix[0][j] = j;\n        }\n        // Fill matrix\n        for(let i = 1; i <= len1; i++){\n            for(let j = 1; j <= len2; j++){\n                const cost = str1[i - 1] === str2[j - 1] ? 0 : 1;\n                matrix[i][j] = Math.min(matrix[i - 1][j] + 1, matrix[i][j - 1] + 1, matrix[i - 1][j - 1] + cost // substitution\n                );\n            }\n        }\n        const distance = matrix[len1][len2];\n        const maxLength = Math.max(len1, len2);\n        return 1 - distance / maxLength;\n    }\n    /**\r\n   * Cache AllPrintings data\r\n   */ async cacheAllPrintings(data) {\n        try {\n            // Store in IndexedDB via mtgjsonCache\n            await _lib_utils_mtgjsonCache__WEBPACK_IMPORTED_MODULE_0__.mtgjsonCache.setMetadata({\n                lastPriceUpdate: data.meta.date,\n                totalCards: this.countTotalCards(data),\n                cacheVersion: data.meta.version\n            });\n            // For now, we'll store a subset of the data to avoid storage issues\n            // In production, you might want to use a more sophisticated storage strategy\n            console.log('AllPrintings data cached successfully');\n        } catch (error) {\n            console.error('Failed to cache AllPrintings data:', error);\n        }\n    }\n    /**\r\n   * Get cached AllPrintings data\r\n   */ async getCachedAllPrintings() {\n        try {\n            // This is a placeholder - in reality, you'd need to implement\n            // efficient storage and retrieval of the large AllPrintings dataset\n            return null;\n        } catch (error) {\n            console.error('Failed to get cached AllPrintings:', error);\n            return null;\n        }\n    }\n    /**\r\n   * Load mapping cache from storage\r\n   */ async loadMappingCache() {\n        try {\n            // Load existing mappings from localStorage or IndexedDB\n            const cached = localStorage.getItem(this.MAPPING_CACHE_KEY);\n            if (cached) {\n                const mappings = JSON.parse(cached);\n                for (const mapping of mappings){\n                    this.mappingCache.set(mapping.scryfallId, mapping);\n                }\n                console.log(\"Loaded \".concat(mappings.length, \" cached mappings\"));\n            }\n        } catch (error) {\n            console.error('Failed to load mapping cache:', error);\n        }\n    }\n    /**\r\n   * Save a single mapping to cache\r\n   */ async saveMappingToCache(mapping) {\n        try {\n            // Save to localStorage (for now)\n            const existingMappings = this.getAllCachedMappings();\n            const updatedMappings = existingMappings.filter((m)=>m.scryfallId !== mapping.scryfallId);\n            updatedMappings.push(mapping);\n            localStorage.setItem(this.MAPPING_CACHE_KEY, JSON.stringify(updatedMappings));\n        } catch (error) {\n            console.error('Failed to save mapping to cache:', error);\n        }\n    }\n    /**\r\n   * Get all cached mappings\r\n   */ getAllCachedMappings() {\n        try {\n            const cached = localStorage.getItem(this.MAPPING_CACHE_KEY);\n            return cached ? JSON.parse(cached) : [];\n        } catch (error) {\n            console.error('Failed to get cached mappings:', error);\n            return [];\n        }\n    }\n    /**\r\n   * Check if data is fresh (within 7 days)\r\n   */ isDataFresh(dateString) {\n        const dataDate = new Date(dateString);\n        const now = new Date();\n        const daysDiff = (now.getTime() - dataDate.getTime()) / (1000 * 60 * 60 * 24);\n        return daysDiff < 7;\n    }\n    /**\r\n   * Count total cards in AllPrintings data\r\n   */ countTotalCards(data) {\n        return Object.values(data.data).reduce((total, set)=>total + set.cards.length, 0);\n    }\n    /**\r\n   * Get mapping statistics\r\n   */ async getMappingStats() {\n        const cachedMappings = this.getAllCachedMappings();\n        return {\n            totalMappings: cachedMappings.length,\n            directMatches: cachedMappings.filter((m)=>m.matchMethod === 'direct').length,\n            fuzzyMatches: cachedMappings.filter((m)=>m.matchMethod === 'name_fuzzy').length,\n            unmappedCards: 0,\n            lastUpdate: cachedMappings.length > 0 ? Math.max(...cachedMappings.map((m)=>new Date(m.lastUpdated).getTime())).toString() : new Date().toISOString()\n        };\n    }\n    /**\r\n   * Clear all cached mappings\r\n   */ async clearMappingCache() {\n        this.mappingCache.clear();\n        localStorage.removeItem(this.MAPPING_CACHE_KEY);\n        console.log('Mapping cache cleared');\n    }\n    /**\r\n   * Batch process multiple cards for mapping\r\n   */ async batchGetMappings(scryfallCards) {\n        await this.initialize();\n        const results = new Map();\n        for (const card of scryfallCards){\n            try {\n                const uuid = await this.getMapping(card);\n                if (uuid) {\n                    results.set(card.id, uuid);\n                }\n            } catch (error) {\n                console.error(\"Failed to map card \".concat(card.name, \":\"), error);\n            }\n        }\n        return results;\n    }\n    constructor(){\n        this.allPrintingsData = null;\n        this.mappingCache = new Map();\n        this.loadingPromise = null;\n        // MTGJSON AllPrintings.json URL\n        this.MTGJSON_ALL_PRINTINGS_URL = 'https://mtgjson.com/api/v5/AllPrintings.json';\n        this.CACHE_KEY = 'mtgjson-all-printings';\n        this.MAPPING_CACHE_KEY = 'card-mappings';\n    }\n}\n// Export singleton instance\nconst cardMappingService = new CardMappingService();\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/services/cardMappingService.ts\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/lib/utils/mtgjsonCache.ts":
/*!***************************************!*\
  !*** ./src/lib/utils/mtgjsonCache.ts ***!
  \***************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   mtgjsonCache: () => (/* binding */ mtgjsonCache)\n/* harmony export */ });\n// IndexedDB configuration for MTGJSON data\nconst DB_NAME = 'MTGJSONCache';\nconst DB_VERSION = 1;\nconst STORES = {\n    PRICE_HISTORY: 'priceHistory',\n    CARD_MAPPINGS: 'cardMappings',\n    METADATA: 'metadata'\n};\n// Cache expiry times\nconst CACHE_EXPIRY = {\n    PRICE_HISTORY: 24 * 60 * 60 * 1000,\n    CARD_MAPPINGS: 7 * 24 * 60 * 60 * 1000,\n    METADATA: 60 * 60 * 1000\n};\nclass MTGJSONCache {\n    async init() {\n        if (this.db) return;\n        if (this.initPromise) return this.initPromise;\n        this.initPromise = new Promise((resolve, reject)=>{\n            if (false) {}\n            const request = indexedDB.open(DB_NAME, DB_VERSION);\n            request.onerror = ()=>{\n                reject(new Error('Failed to open IndexedDB'));\n            };\n            request.onsuccess = ()=>{\n                this.db = request.result;\n                resolve();\n            };\n            request.onupgradeneeded = (event)=>{\n                const db = event.target.result;\n                // Create price history store\n                if (!db.objectStoreNames.contains(STORES.PRICE_HISTORY)) {\n                    const priceStore = db.createObjectStore(STORES.PRICE_HISTORY, {\n                        keyPath: 'uuid'\n                    });\n                    priceStore.createIndex('cardId', 'cardId', {\n                        unique: false\n                    });\n                    priceStore.createIndex('lastUpdated', 'lastUpdated', {\n                        unique: false\n                    });\n                }\n                // Create card mappings store\n                if (!db.objectStoreNames.contains(STORES.CARD_MAPPINGS)) {\n                    const mappingStore = db.createObjectStore(STORES.CARD_MAPPINGS, {\n                        keyPath: 'scryfallId'\n                    });\n                    mappingStore.createIndex('uuid', 'uuid', {\n                        unique: false\n                    });\n                    mappingStore.createIndex('name', 'name', {\n                        unique: false\n                    });\n                }\n                // Create metadata store\n                if (!db.objectStoreNames.contains(STORES.METADATA)) {\n                    db.createObjectStore(STORES.METADATA, {\n                        keyPath: 'key'\n                    });\n                }\n            };\n        });\n        return this.initPromise;\n    }\n    async getStore(storeName) {\n        let mode = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 'readonly';\n        await this.init();\n        if (!this.db) throw new Error('Database not initialized');\n        const transaction = this.db.transaction([\n            storeName\n        ], mode);\n        return transaction.objectStore(storeName);\n    }\n    // Price History Cache Methods\n    async getPriceHistory(uuid) {\n        try {\n            const store = await this.getStore(STORES.PRICE_HISTORY);\n            const request = store.get(uuid);\n            return new Promise((resolve, reject)=>{\n                request.onsuccess = ()=>{\n                    const result = request.result;\n                    if (!result) {\n                        resolve(null);\n                        return;\n                    }\n                    // Check if cache entry is expired\n                    if (Date.now() > result.expiresAt) {\n                        // Remove expired entry\n                        this.removePriceHistory(uuid);\n                        resolve(null);\n                        return;\n                    }\n                    resolve(result.data);\n                };\n                request.onerror = ()=>{\n                    reject(new Error('Failed to get price history from cache'));\n                };\n            });\n        } catch (error) {\n            console.error('Error getting price history from cache:', error);\n            return null;\n        }\n    }\n    async setPriceHistory(uuid, priceHistory) {\n        try {\n            const store = await this.getStore(STORES.PRICE_HISTORY, 'readwrite');\n            const cacheEntry = {\n                data: priceHistory,\n                timestamp: Date.now(),\n                expiresAt: Date.now() + CACHE_EXPIRY.PRICE_HISTORY\n            };\n            const request = store.put({\n                uuid,\n                ...cacheEntry\n            });\n            return new Promise((resolve, reject)=>{\n                request.onsuccess = ()=>resolve();\n                request.onerror = ()=>reject(new Error('Failed to cache price history'));\n            });\n        } catch (error) {\n            console.error('Error caching price history:', error);\n            throw error;\n        }\n    }\n    async removePriceHistory(uuid) {\n        try {\n            const store = await this.getStore(STORES.PRICE_HISTORY, 'readwrite');\n            const request = store.delete(uuid);\n            return new Promise((resolve, reject)=>{\n                request.onsuccess = ()=>resolve();\n                request.onerror = ()=>reject(new Error('Failed to remove price history'));\n            });\n        } catch (error) {\n            console.error('Error removing price history:', error);\n        }\n    }\n    // Card Mapping Cache Methods\n    async getCardMapping(scryfallId) {\n        try {\n            const store = await this.getStore(STORES.CARD_MAPPINGS);\n            const request = store.get(scryfallId);\n            return new Promise((resolve, reject)=>{\n                request.onsuccess = ()=>{\n                    const result = request.result;\n                    if (!result) {\n                        resolve(null);\n                        return;\n                    }\n                    // Check if cache entry is expired\n                    if (Date.now() > result.expiresAt) {\n                        this.removeCardMapping(scryfallId);\n                        resolve(null);\n                        return;\n                    }\n                    resolve(result.data);\n                };\n                request.onerror = ()=>{\n                    reject(new Error('Failed to get card mapping from cache'));\n                };\n            });\n        } catch (error) {\n            console.error('Error getting card mapping from cache:', error);\n            return null;\n        }\n    }\n    async setCardMapping(scryfallId, mtgjsonCard) {\n        try {\n            const store = await this.getStore(STORES.CARD_MAPPINGS, 'readwrite');\n            const cacheEntry = {\n                data: mtgjsonCard,\n                timestamp: Date.now(),\n                expiresAt: Date.now() + CACHE_EXPIRY.CARD_MAPPINGS\n            };\n            const request = store.put({\n                scryfallId,\n                ...cacheEntry\n            });\n            return new Promise((resolve, reject)=>{\n                request.onsuccess = ()=>resolve();\n                request.onerror = ()=>reject(new Error('Failed to cache card mapping'));\n            });\n        } catch (error) {\n            console.error('Error caching card mapping:', error);\n            throw error;\n        }\n    }\n    async removeCardMapping(scryfallId) {\n        try {\n            const store = await this.getStore(STORES.CARD_MAPPINGS, 'readwrite');\n            const request = store.delete(scryfallId);\n            return new Promise((resolve, reject)=>{\n                request.onsuccess = ()=>resolve();\n                request.onerror = ()=>reject(new Error('Failed to remove card mapping'));\n            });\n        } catch (error) {\n            console.error('Error removing card mapping:', error);\n        }\n    }\n    // Metadata Methods\n    async getMetadata() {\n        try {\n            const store = await this.getStore(STORES.METADATA);\n            const request = store.get('metadata');\n            return new Promise((resolve, reject)=>{\n                request.onsuccess = ()=>{\n                    const result = request.result;\n                    if (!result) {\n                        resolve(null);\n                        return;\n                    }\n                    // Check if metadata is expired\n                    if (Date.now() > result.expiresAt) {\n                        this.setMetadata({\n                            lastPriceUpdate: '',\n                            totalCards: 0,\n                            cacheVersion: '1.0'\n                        });\n                        resolve(null);\n                        return;\n                    }\n                    resolve(result.data);\n                };\n                request.onerror = ()=>{\n                    reject(new Error('Failed to get metadata from cache'));\n                };\n            });\n        } catch (error) {\n            console.error('Error getting metadata from cache:', error);\n            return null;\n        }\n    }\n    async setMetadata(metadata) {\n        try {\n            const store = await this.getStore(STORES.METADATA, 'readwrite');\n            const cacheEntry = {\n                data: metadata,\n                timestamp: Date.now(),\n                expiresAt: Date.now() + CACHE_EXPIRY.METADATA\n            };\n            const request = store.put({\n                key: 'metadata',\n                ...cacheEntry\n            });\n            return new Promise((resolve, reject)=>{\n                request.onsuccess = ()=>resolve();\n                request.onerror = ()=>reject(new Error('Failed to cache metadata'));\n            });\n        } catch (error) {\n            console.error('Error caching metadata:', error);\n            throw error;\n        }\n    }\n    // Bulk Operations\n    async batchSetPriceHistories(priceHistories) {\n        try {\n            const store = await this.getStore(STORES.PRICE_HISTORY, 'readwrite');\n            const transaction = store.transaction;\n            const promises = priceHistories.map((param)=>{\n                let { uuid, data } = param;\n                const cacheEntry = {\n                    data,\n                    timestamp: Date.now(),\n                    expiresAt: Date.now() + CACHE_EXPIRY.PRICE_HISTORY\n                };\n                const request = store.put({\n                    uuid,\n                    ...cacheEntry\n                });\n                return new Promise((resolve, reject)=>{\n                    request.onsuccess = ()=>resolve();\n                    request.onerror = ()=>reject(new Error(\"Failed to cache price history for \".concat(uuid)));\n                });\n            });\n            await Promise.all(promises);\n            return new Promise((resolve, reject)=>{\n                transaction.oncomplete = ()=>resolve();\n                transaction.onerror = ()=>reject(new Error('Batch price history caching failed'));\n            });\n        } catch (error) {\n            console.error('Error batch caching price histories:', error);\n            throw error;\n        }\n    }\n    // Cache Management\n    async clearExpiredEntries() {\n        try {\n            const now = Date.now();\n            const stores = [\n                STORES.PRICE_HISTORY,\n                STORES.CARD_MAPPINGS,\n                STORES.METADATA\n            ];\n            for (const storeName of stores){\n                const store = await this.getStore(storeName, 'readwrite');\n                const request = store.openCursor();\n                await new Promise((resolve, reject)=>{\n                    request.onsuccess = ()=>{\n                        const cursor = request.result;\n                        if (cursor) {\n                            const entry = cursor.value;\n                            if (now > entry.expiresAt) {\n                                cursor.delete();\n                            }\n                            cursor.continue();\n                        } else {\n                            resolve();\n                        }\n                    };\n                    request.onerror = ()=>{\n                        reject(new Error(\"Failed to clear expired entries from \".concat(storeName)));\n                    };\n                });\n            }\n        } catch (error) {\n            console.error('Error clearing expired cache entries:', error);\n        }\n    }\n    async clearAllCache() {\n        try {\n            const stores = [\n                STORES.PRICE_HISTORY,\n                STORES.CARD_MAPPINGS,\n                STORES.METADATA\n            ];\n            for (const storeName of stores){\n                const store = await this.getStore(storeName, 'readwrite');\n                const request = store.clear();\n                await new Promise((resolve, reject)=>{\n                    request.onsuccess = ()=>resolve();\n                    request.onerror = ()=>reject(new Error(\"Failed to clear \".concat(storeName)));\n                });\n            }\n        } catch (error) {\n            console.error('Error clearing cache:', error);\n            throw error;\n        }\n    }\n    async getCacheStats() {\n        try {\n            const [priceCount, mappingCount] = await Promise.all([\n                this.getStoreCount(STORES.PRICE_HISTORY),\n                this.getStoreCount(STORES.CARD_MAPPINGS)\n            ]);\n            return {\n                priceHistoryCount: priceCount,\n                cardMappingCount: mappingCount,\n                totalSize: 0,\n                lastCleanup: null\n            };\n        } catch (error) {\n            console.error('Error getting cache stats:', error);\n            return {\n                priceHistoryCount: 0,\n                cardMappingCount: 0,\n                totalSize: 0,\n                lastCleanup: null\n            };\n        }\n    }\n    async getStoreCount(storeName) {\n        const store = await this.getStore(storeName);\n        const request = store.count();\n        return new Promise((resolve, reject)=>{\n            request.onsuccess = ()=>resolve(request.result);\n            request.onerror = ()=>reject(new Error(\"Failed to get count for \".concat(storeName)));\n        });\n    }\n    // Cleanup\n    async close() {\n        if (this.db) {\n            this.db.close();\n            this.db = null;\n            this.initPromise = null;\n        }\n    }\n    constructor(){\n        this.db = null;\n        this.initPromise = null;\n    }\n}\n// Export singleton instance\nconst mtgjsonCache = new MTGJSONCache();\n// Initialize cache on import (client-side only)\nif (true) {\n    mtgjsonCache.init().catch(console.error);\n    // Clean up expired entries on page load\n    setTimeout(()=>{\n        mtgjsonCache.clearExpiredEntries().catch(console.error);\n    }, 5000);\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (mtgjsonCache);\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/utils/mtgjsonCache.ts\n"));

/***/ })

}]);